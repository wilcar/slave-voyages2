[
["introduction.html", "Explorer la Trans-Atlantic Slave trade Database avec R Introduction", " Explorer la Trans-Atlantic Slave trade Database avec R Wilfrid Cariou 2020-04-18 Introduction R est un langage de programmation open source multiplateforme spécialisé dans le traitement et l’analyse de données. Son classement en avril 2020, comme le dixième langage le plus populaire au monde, selon l’index TIOBE, traduit son importance comme outil de traitement des données. R est une implémentation du langage de programmation S spécialisé dans les statistiques, créé par John Chambers en 1976, combiné au langage Scheme. Il existe des différences importantes entre R et S, mais une grande partie du code écrit pour S s’exécute sans modification dans R. Le langage est développé à partir de 1992 par Ross Ihaka et Robert Gentleman à l’Université d’Auckland. La première version officielle est publiée en 2000. "],
["prise-en-main.html", "Chapter 1 Prise en main 1.1 Installation 1.2 Evolutivité 1.3 Interface 1.4 Lecture des données 1.5 Quelques bases du langage", " Chapter 1 Prise en main 1.1 Installation ⚠️ Vous devez d’abord installer R avant d’installer R Studio. 1.1.1 Installer R Pour une installation sous Windows ou MacOS, vous devez vous rendre sur la page Page d’accueil du projet R puis sélectionnez Download Cran suivi de 0-Cloud. Vous devez télécharger la distribution binaire précompilée (Precompiled binary distributions of the base system and contributed packages) correspondant à votre système d’exploitation. Exécutez le fichier d’installation et validez les options par défaut lors du processus d’installation. Si vous travaillez sous Linux, vous trouverez R via Gestionnaire (ou bibliothèque) de logiciels . 1.1.2 Installer RStudio Après avoir installé R, rendez-vous sur http://www.rstudio.com/products/rstudio/download/ pour télécharger l’édition Open Source de RStudio Desktop. Téléchargez l’installateur correspondant à votre système d’exploitation et exécutez le fichier d’installation. 1.2 Evolutivité Les capacités de R sont étendues grâce à des packages créés par les utilisateurs. Un ensemble de packages de base est inclus avec l’installation de R et plus de 15500 packages supplémentaires (en date d’avril 2020 ) sont disponibles sur le dépôt CRAN. Les packages sont téléchargés depuis le site du CRAN par le biais de la fonction install.packages ou le panneau dédié de R Studio. ⚠️ Il est important de distinguer l’installation des packages et leur utilisation à travers la fonction library(). L’installation télécharge les packages sur internet et les installe localement sur le disque dur de l’ordinateur dans le dossier R (Cette opération n’est à réaliser qu’une seule fois). la fonction library() permet de faire appel aux fonctions du package. Elle doit être appelée à chaque fois que cela est nécessaire. ⚠️ Lors d’une nouvelle installation de R, vous serez amené à télécharger un grand nombre de packages. ⚠️ Lors de l’installation des packages par le panneau Packages (ou la fonction install.packages) sous Windows et MacOs, le message There are binary versions available but the source versions are later peut aparaître suivi de la question Do you want to install from sources the package which needs compilation? Cela signifie que le package a été mis à jour récemment sur CRAN mais que le binaire n’est pas encore disponible pour votre système d’exploitation. En effet, certains packages R ont des parties importantes écrites dans d’autres langages compilés, généralement C / C ++ ou Fortran. Ces langages ont besoin d’outils logiciels accessoires pour traduire (“compiler”) leur code source en langage machine qui peut s’exécuter sur un système particulier. Pour Windows et MacOs, l’auteur d’un package met à disposition des binaires précompilés et ils peut avoir un délais entre leur mise à disposition pour MacOs et Windows. Ainsi, vous ne pouvez que répondre non à la question posée et n’obtiendrez pas la version la plus récente. Vous devrez patienter afin d’attendre une mise en ligne (le oui est inopérant). 1.3 Interface Le langage R possède une interface (GUI) limitée qui n’a plus vocation à être directement utilisée. L’utilisateur interagit avec R à travers l’environnement de développement R Studio. knitr::include_graphics(rep(&quot;images/rstudio.png&quot;)) Figure 1.1: RStudio 1.3.1 Quelques repères indispensables pour débuter Le gestionnaire de projet : assure la gestion des fichiers liés à une session en R. La console : zone de dialogue directe avec R (entrées, sorties). Le panneau source : zone d’écriture de scripts (fichiers de type texte dans lequel il est possible de saisir directement une séquence d’instructions pour l’exécuter par la suite). Zone d’écriture de documents en R Markdown. L’environnement (environment) : Permet l’importation de tableaux de données. Gère les objets en mémoire (Workspace) (List, Grid, Clear). Le répertoire de travail (files) : zone d’affichage du répertoire de travail. Le gestionnaire de packages (packages) : gère les packages (téléchargements, mises à jour). Graphiques et visualisation (plots &amp; viewer) : Affichage des sorties. 1.3.2 Organiser ses fichiers dans un projet Une session de R pointe systématiquement vers un répertoire définit par l’utilisateur comme répertoire de travail (working directory) pour y lire ou écrire des données stockées dans différents fichiers. En pratique, on associe tous les fichiers relatifs à un même objet de travail à un répertoire dédié. RStudio facilite cette gestion avec les “projets”. Créer un projet : Etape 1 : ouvrez RStudio Etape 2 : menu project &gt; New project &gt; Directory name : nom du répertoire &gt; &gt; as subdirectory of U: Ouvrir et fermer un projet : Ouverture depuis le gestionnaire de fichier du système d’exploitation (ex : Windows) : cliquez sur le fichier .Rproj. Fermeture (RStudio : Menu file &gt; quit session). ⚠️ L’option Save workspace permet de sauvegarder les objets présents dans l’environnement. 1.3.3 Console et scripts Un ordinateur assure des opérations de traitement de l’information qu’il exécute successivement. Ce traitement est mené à l’aide d’instructions. R appartient à la catégorie des langages interprétés. Il exécute les instructions de manière séquentielle, « pas à pas », en vérifiant la syntaxe de chaque instruction et en la traduisant en langage machine lorsqu’elle ne comporte pas d’erreur. On utilise la console lorsque’il s’agit de saisir des instructions isolées ou de courtes séquences d’instructions et les scripts lorsque l’on écrit un programme que l’on pourra conserver dans un fichier. 1.3.3.1 Comment saisir une instruction dans la console ? Une instruction est saisie dans la console à droite de l’invite (chevron &gt;). Elle est évaluée par la touche Entrée. Vous pouvez utiliser les flèches haut et bas pour naviguer dans l’historique des commandes que vous avez tapées précédemment. Lorsqu’une instruction est incomplète la console affiche le signe + signifiant que R “attend la suite” : On peut alors compléter l’instruction sur cette nouvelle ligne et valider par Entrée. Tout annuler et revenir à l’invite de commandes normal en appuyant sur la touche Échap. 1.3.3.2 Comment saisir une instruction dans un script ? On crée un script par le menu File &gt; New file &gt; R Script. On peut exécuter une séquence d’instruction en la sélectionnant et on valide par Run ou Ctrl + Entrée. On peut exécuter la totalité du script par Source (Ctrl + maj + s) ou Source with Echo (Ctrl + maj + Entrée) qui exécute le programme comme si vous aviez copié chaque ligne dans la console. 1.4 Lecture des données Les données de la Trans-Atlantic slave trade database sont enregistrées dans un fichier au format.savcorrespondant à une matrice de données SPSS. Les données sont importées par des packages spécialisés et mises en qualité dans un script appelé tastdb-spss-import.R. Le script vise à substituer Les étiquettes de valeur aux valeurs, lire les dates et convertir les noms de variables en minuscules pour plus de cohérence avec les conventions de R. Vous devez donc disposer des fichiers tastdb-exp-2019.sav et tastdb-spss-import.R dans votre répertoire de travail (les fichiers sont disponibles à l’adresse https://github.com/wilcar/slaves-voyages). L’emploi du script est transparent pour l’utilisateur grâce à la fonction source qui permet d’exécuter un script R à l’intérieur d’un autre script. Vous n’avez donc qu’à exécuter l’instruction ci-dessous pour charger en mémoire (environnement les données de la TastDb sous le nom de voyages) source(&quot;tastdb-spss-import.R&quot;) 1.5 Quelques bases du langage 1.5.1 Des instructions simples, les expressions arithmétiques 50 + 80 + 200 ## [1] 330 (50 + 80 + 200)/3 ## [1] 110 R utilise le point comme séparateur décimal. R utilise les signes opératoires +, -, *, / et ^ et les parenthèses. 1.5.2 Les variables Les variables permettent de stocker des informations dans la mémoire de l’ordinateur. Pour employer une image, une variable est une boîte, que l’ordinateur va repérer par une étiquette. Pour avoir accès au contenu de la boîte, il suffit de la désigner par son étiquette. Quand on créé une variable “vide” on parle de déclaration en spécifiant son nom. Quand on attribue une valeur à une variable, on parle d’affectation. L’affectation se lit de droite à gauche. Les instructions situées à droite du signe flèche sont affectées à une variable désignée par un nom. La flèche est saisie par le raccourcis clavier Alt-6. # Exemple de déclaration var1 &lt;-c() # Exemples d&#39;affectations var2 &lt;- 4192 var3 &lt;- 50 + 80 + 200 var4 &lt;- &quot;Jean Simon&quot; 1.5.2.1 Afficher le contenu d’une variable print(var3) # Affichage du contenu de la variable exp_fr. ## [1] 330 var3 # Ou plus simplement. ## [1] 330 1.5.2.2 Supprimer une variable rm(var4) 1.5.2.3 Réaffecter une valeur à une variable Il est permis de ré-affecter une nouvelle valeur à une même variable. Une variable possède à un moment donné une valeur et une seule. Quand on assigne une nouvelle valeur à une variable déjà existante, la valeur précédente est perdue. var2 &lt;- 4192 var2 &lt;- 6000 var2 ## [1] 6000 1.5.2.4 Exemple de séquence d’instructions Programme permettant d’échanger les valeurs de deux variables x et y, et ce quel que soit leur contenu préalable. x &lt;- 3 y &lt;- 5 print (x) ## [1] 3 print (y) ## [1] 5 z &lt;- x x &lt;- y y &lt;- z print (x) ## [1] 5 print (y) ## [1] 3 1.5.3 Les vecteurs Un vecteur est un objet qui contient des éléments de type identique. Les vecteurs peuvent être construits en combinant des éléments grâce à l’importante fonction c() (combine). Les vecteurs peuvent générer des séquences de nombres. La position d’un élément d’un vecteur est appelé position d’index. Elle est noté par un nombre entre crochet. Ainsi le 19e élément du vecteur chrono et 1532 et le 20e, 1533. # Vecteur textuel ports_bretons &lt;- c(&quot;Nantes&quot;, &quot;Brest&quot;, &quot;Saint-Malo&quot;, &quot;Vannes&quot;) ports_bretons ## [1] &quot;Nantes&quot; &quot;Brest&quot; &quot;Saint-Malo&quot; &quot;Vannes&quot; # Vecteur numérique chrono &lt;- 1514:1789 chrono ## [1] 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 ## [16] 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 ## [31] 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 ## [46] 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 ## [61] 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 ## [76] 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 ## [91] 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 ## [106] 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 ## [121] 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 ## [136] 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 ## [151] 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 ## [166] 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 ## [181] 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 ## [196] 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 ## [211] 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 ## [226] 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 ## [241] 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 ## [256] 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 ## [271] 1784 1785 1786 1787 1788 1789 1.5.4 Les fonctions 1.5.4.1 Découvrir les fonctions Une fonction est programmée pour accomplir une tâche et retourner un résultat. Les composantes d’une fonction sont son nom qui nous permettra de nous y référer et un ou plusieurs arguments, c’est à dire les paramètres nécessaires à la fonction (entre parenthèses et séparés par le signe virgule). A titre d’exemple, la fonction samplepermet de tirer un échantillon au sein d’un vecteur. Elle prend comme arguments le nom du vecteur ainsi que la taille de l’échantillon.Certains arguments possèdent des valeurs par défaut et n’ont besoins d’être précisés uniquement si l’on souhait être plus explicite ou si on cherche à modifier cette valeur. Ainsi, l’instruction sample(chrono,1, replace = FALSE) equivant à sample(chrono,1). chrono &lt;- 1514:1789 sample(chrono,1) ## [1] 1614 sample(chrono,3) ## [1] 1754 1570 1783 sample(chrono,1, replace = TRUE) ## [1] 1672 sample(chrono,1, replace = FALSE) ## [1] 1721 1.5.4.2 Découvrir quelques fonctions existantes de R Base nchar : compter le nombre de caractères. nchar(&quot;Nantes&quot;) ## [1] 6 paste : concaténation, procédé qui permettant de coller bout à bout différentes chaînes de caractères pour n’en faire plus qu’une seule. paste(&quot;Nantes&quot;, &quot;Lorient&quot;) ## [1] &quot;Nantes Lorient&quot; paste0(&quot;Nantes&quot;, &quot;Lorient&quot;) ## [1] &quot;NantesLorient&quot; round : arrondi d’un nombre décimal. round(4850/26, 1) ## [1] 186.5 toupper : conversion en majuscules. toupper(&quot;Nantes&quot;) ## [1] &quot;NANTES&quot; length : longueur d’un vecteur (nombre d’éléments contenus dans le vecteur). chrono &lt;- 1514:1789 length(chrono) ## [1] 276 1.5.4.3 Imbriquer des fonctions Il est possible d’imbriquer des fonctions dans une instruction : fonction1(fonction2()) ports_bretons &lt;- c(&quot;Nantes&quot;, &quot;Brest&quot;, &quot;Saint-Malo&quot;, &quot;Vannes&quot;) sort(toupper(ports_bretons)) ## [1] &quot;BREST&quot; &quot;NANTES&quot; &quot;SAINT-MALO&quot; &quot;VANNES&quot; 1.5.5 Règles et conventions de syntaxe 1.5.5.1 Déclaration La déclaration obéit à des règles : les noms des variables doivent impérativement commencer par une lettre, la casse est significative et le langage lui-même se réserve des termes. Ils sont inutilisables comme noms de variables. 1850 &lt;- 1850 # Erreur de déclaration annee1850 &lt;- 1850 # Syntaxe correcte Nantes &lt;- 150 # différent de... nantes &lt;- 550 sum &lt;- 250 + 255 + 567 # Erreur de déclaration somme &lt;- 250 + 255 + 567 # Syntaxe correcte 1.5.5.2 Conventions de déclaration Tout en minuscule, séparation par un trait de soulignement (snake_case ), éviter les caractères accentués et les symboles, faire court ! ntes_exp_xviie # OK NtesExpXVIIe # non jeu_de_donnees dataset # A privilégier france_esclaves_expeditions # A éviter fr_esc_exp # A privilégier 1.5.5.3 Conventions de style Faire précéder et suivre les opérateurs par un espace : 2 + 2 Faire suivre une virgule par un espace : c(1, 5) Placer un espace avant et après le symbole d’affectation : a &lt;- 3 Ne pas placer d’espace entre une fonction et une parenthèse ouvrante : sum(2, 5) 1.5.6 Commenter ses instructions Les commentaires sont utilisés pour annoter le code. Les commentaires sont ignorés par R. N’excédez 80 caractères par ligne, commentaires inclus pour une question de lisibilité. R ne gère pas les commentaires multilignes # Commentaire en pleine ligne sort(c(4, 1, 3, 2)) sort(c(4, 1, 3, 2)) # Commentaire court en fin de ligne "],
["inventaire-des-données.html", "Chapter 2 Inventaire des données 2.1 Inspection visuelle des données 2.2 Structure des données 2.3 Expéditions ajoutées à l’édition 2019 de la base Trans Atlantic slave trade Dabase", " Chapter 2 Inventaire des données 2.1 Inspection visuelle des données La visualisation du tableau de données dans la console à l’aide la fonction printn’est guère envisageable en raison de ses dimensions. Utilisez plutôt l’affichage sous la forme de table html (fonction View ou le raccourcis du panneau Environnement). 2.2 Structure des données 2.2.1 Voyages, un objet de type Tibble Un tibble est une réinvention moderne du data.frame de R. C’est une matrice composée : d’une marge d’en-têtes (variables names) de lignes (rows, obs.) de colonnes (columns, variables). Chaque colonne comporte des données d’un même type. Les colonnes sont nécessairement de longueur identique. La notion de dimensions correspond au nombre de lignes et de colonnes composant le tableau de données. dim(voyages) ## [1] 36002 274 2.2.2 Les variables 2.2.2.1 Lister les en-têtes (variables names) Les noms de variables sont classées en fonction de leur position d’index par défaut. Il est également possible de les afficher alphabétiquement par l’instruction sort(names(voyages)). names(voyages) ## [1] &quot;intraamer&quot; &quot;voyageid&quot; &quot;adlt1imp&quot; &quot;adlt2imp&quot; &quot;adlt3imp&quot; ## [6] &quot;adpsale1&quot; &quot;adpsale2&quot; &quot;adult1&quot; &quot;adult2&quot; &quot;adult3&quot; ## [11] &quot;adult4&quot; &quot;adult5&quot; &quot;adult6&quot; &quot;adult7&quot; &quot;arrport&quot; ## [16] &quot;arrport2&quot; &quot;boy1&quot; &quot;boy2&quot; &quot;boy3&quot; &quot;boy4&quot; ## [21] &quot;boy5&quot; &quot;boy6&quot; &quot;boy7&quot; &quot;boyrat1&quot; &quot;boyrat3&quot; ## [26] &quot;boyrat7&quot; &quot;captaina&quot; &quot;captainb&quot; &quot;captainc&quot; &quot;chil1imp&quot; ## [31] &quot;chil2imp&quot; &quot;chil3imp&quot; &quot;child1&quot; &quot;child2&quot; &quot;child3&quot; ## [36] &quot;child4&quot; &quot;child5&quot; &quot;child6&quot; &quot;child7&quot; &quot;chilrat1&quot; ## [41] &quot;chilrat3&quot; &quot;chilrat7&quot; &quot;constreg&quot; &quot;crew&quot; &quot;crew1&quot; ## [46] &quot;crew2&quot; &quot;crew3&quot; &quot;crew4&quot; &quot;crew5&quot; &quot;crewdied&quot; ## [51] &quot;d1slatra&quot; &quot;d1slatrb&quot; &quot;d1slatrc&quot; &quot;datarr32&quot; &quot;datarr33&quot; ## [56] &quot;datarr34&quot; &quot;datarr36&quot; &quot;datarr37&quot; &quot;datarr38&quot; &quot;datarr39&quot; ## [61] &quot;datarr40&quot; &quot;datarr41&quot; &quot;datarr43&quot; &quot;datarr44&quot; &quot;datarr45&quot; ## [66] &quot;ddepam&quot; &quot;ddepamb&quot; &quot;ddepamc&quot; &quot;deptregimp&quot; &quot;deptregimp1&quot; ## [71] &quot;dlslatra&quot; &quot;dlslatrb&quot; &quot;dlslatrc&quot; &quot;embport&quot; &quot;embport2&quot; ## [76] &quot;embreg&quot; &quot;embreg2&quot; &quot;evgreen&quot; &quot;fate&quot; &quot;fate2&quot; ## [81] &quot;fate3&quot; &quot;fate4&quot; &quot;female1&quot; &quot;female2&quot; &quot;female3&quot; ## [86] &quot;female4&quot; &quot;female5&quot; &quot;female6&quot; &quot;female7&quot; &quot;feml1imp&quot; ## [91] &quot;feml2imp&quot; &quot;feml3imp&quot; &quot;girl1&quot; &quot;girl2&quot; &quot;girl3&quot; ## [96] &quot;girl4&quot; &quot;girl5&quot; &quot;girl6&quot; &quot;girl7&quot; &quot;girlrat1&quot; ## [101] &quot;girlrat3&quot; &quot;girlrat7&quot; &quot;guns&quot; &quot;infant1&quot; &quot;infant2&quot; ## [106] &quot;infant3&quot; &quot;infant4&quot; &quot;infant5&quot; &quot;infant6&quot; &quot;jamcaspr&quot; ## [111] &quot;majbuypt&quot; &quot;majbyimp&quot; &quot;majbyimp1&quot; &quot;majselpt&quot; &quot;male1&quot; ## [116] &quot;male2&quot; &quot;male3&quot; &quot;male4&quot; &quot;male5&quot; &quot;male6&quot; ## [121] &quot;male7&quot; &quot;male1imp&quot; &quot;male2imp&quot; &quot;male3imp&quot; &quot;malrat1&quot; ## [126] &quot;malrat3&quot; &quot;malrat7&quot; &quot;men1&quot; &quot;men2&quot; &quot;men3&quot; ## [131] &quot;men4&quot; &quot;men5&quot; &quot;men6&quot; &quot;men7&quot; &quot;menrat1&quot; ## [136] &quot;menrat3&quot; &quot;menrat7&quot; &quot;mjbyptimp&quot; &quot;mjselimp&quot; &quot;mjselimp1&quot; ## [141] &quot;mjslptimp&quot; &quot;natinimp&quot; &quot;national&quot; &quot;ncar13&quot; &quot;ncar15&quot; ## [146] &quot;ncar17&quot; &quot;ndesert&quot; &quot;npafttra&quot; &quot;nppretra&quot; &quot;npprior&quot; ## [151] &quot;ownera&quot; &quot;ownerb&quot; &quot;ownerc&quot; &quot;ownerd&quot; &quot;ownere&quot; ## [156] &quot;ownerf&quot; &quot;ownerg&quot; &quot;ownerh&quot; &quot;owneri&quot; &quot;ownerj&quot; ## [161] &quot;ownerk&quot; &quot;ownerl&quot; &quot;ownerm&quot; &quot;ownern&quot; &quot;ownero&quot; ## [166] &quot;ownerp&quot; &quot;plac1tra&quot; &quot;plac2tra&quot; &quot;plac3tra&quot; &quot;placcons&quot; ## [171] &quot;placreg&quot; &quot;portdep&quot; &quot;portret&quot; &quot;ptdepimp&quot; &quot;regarr&quot; ## [176] &quot;regarr2&quot; &quot;regdis1&quot; &quot;regdis2&quot; &quot;regdis3&quot; &quot;regem1&quot; ## [181] &quot;regem2&quot; &quot;regem3&quot; &quot;regisreg&quot; &quot;resistance&quot; &quot;retrnreg&quot; ## [186] &quot;retrnreg1&quot; &quot;rig&quot; &quot;saild1&quot; &quot;saild2&quot; &quot;saild3&quot; ## [191] &quot;saild4&quot; &quot;saild5&quot; &quot;shipname&quot; &quot;sla1port&quot; &quot;slaarriv&quot; ## [196] &quot;sladafri&quot; &quot;sladamer&quot; &quot;sladvoy&quot; &quot;slamimp&quot; &quot;slas32&quot; ## [201] &quot;slas36&quot; &quot;slas39&quot; &quot;slavema1&quot; &quot;slavema3&quot; &quot;slavema7&quot; ## [206] &quot;slavemx1&quot; &quot;slavemx3&quot; &quot;slavemx7&quot; &quot;slavmax1&quot; &quot;slavmax3&quot; ## [211] &quot;slavmax7&quot; &quot;slaximp&quot; &quot;slinten2&quot; &quot;slintend&quot; &quot;sourcea&quot; ## [216] &quot;sourceb&quot; &quot;sourcec&quot; &quot;sourced&quot; &quot;sourcee&quot; &quot;sourcef&quot; ## [221] &quot;sourceg&quot; &quot;sourceh&quot; &quot;sourcei&quot; &quot;sourcej&quot; &quot;sourcek&quot; ## [226] &quot;sourcel&quot; &quot;sourcem&quot; &quot;sourcen&quot; &quot;sourceo&quot; &quot;sourcep&quot; ## [231] &quot;sourceq&quot; &quot;sourcer&quot; &quot;tonmod&quot; &quot;tonnage&quot; &quot;tontype&quot; ## [236] &quot;tslavesd&quot; &quot;tslavesp&quot; &quot;tslmtimp&quot; &quot;voy1imp&quot; &quot;voy2imp&quot; ## [241] &quot;voyage&quot; &quot;vymrtimp&quot; &quot;vymrtrat&quot; &quot;women1&quot; &quot;women2&quot; ## [246] &quot;women3&quot; &quot;women4&quot; &quot;women5&quot; &quot;women6&quot; &quot;women7&quot; ## [251] &quot;womrat1&quot; &quot;womrat3&quot; &quot;womrat7&quot; &quot;xmimpflag&quot; &quot;year5&quot; ## [256] &quot;year10&quot; &quot;year25&quot; &quot;year100&quot; &quot;yearaf&quot; &quot;yearam&quot; ## [261] &quot;yeardep&quot; &quot;yrcons&quot; &quot;yrreg&quot; &quot;datebuy&quot; &quot;datedep&quot; ## [266] &quot;datedepa&quot; &quot;datedepam&quot; &quot;datedepb&quot; &quot;datedepc&quot; &quot;dateend&quot; ## [271] &quot;dateland1&quot; &quot;dateland2&quot; &quot;dateland3&quot; &quot;dateleftafr&quot; 2.2.2.2 Types de variables Les fonctions str (base R) ou glimpse (package dplyr) listent les différentes variables, indiquent leur type ainsi que les premières valeurs quelles prennent. La fonction typeof retourne quant à elle le type de données d’une variable déterminée. Par exemple, typeof(voyages$shipname) retourne le type de la variable shipname. L’argument facultatif list.len=ncol(voyages[1:10]) permet de limiter la liste des variables (ici les dix premières). Pour afficher la totalité de la structure, utilisez list.len=ncol(voyages). str(voyages, list.len=ncol(voyages[1:10]), max.level = NA) ## tibble [36,002 x 274] (S3: tbl_df/tbl/data.frame) ## $ intraamer : chr [1:36002] &quot;Trans-Atlantic&quot; &quot;Trans-Atlantic&quot; &quot;Trans-Atlantic&quot; &quot;Trans-Atlantic&quot; ... ## $ voyageid : num [1:36002] 1 2 3 4 5 6 7 8 9 10 ... ## $ adlt1imp : num [1:36002] NA NA NA NA NA NA NA NA NA NA ... ## $ adlt2imp : num [1:36002] 1 NA NA NA NA NA NA NA NA NA ... ## $ adlt3imp : num [1:36002] NA NA NA NA NA NA NA NA NA NA ... ## $ adpsale1 : chr [1:36002] NA NA NA NA ... ## $ adpsale2 : chr [1:36002] NA NA NA NA ... ## $ adult1 : num [1:36002] NA NA NA NA NA NA NA NA NA NA ... ## $ adult2 : num [1:36002] NA NA NA NA NA NA NA NA NA NA ... ## $ adult3 : num [1:36002] NA NA NA NA NA NA NA NA NA NA ... ## [list output truncated] 2.2.2.3 Valeurs disponibles pour chaque variable Dans R, les observations manquantes sont notées NA (not available). Par défaut, la plupart des fonctions calculatoires (somme, moyenne, minimum, maximum, etc.) n’acceptent pas les variables contenant des valeurs manquantes. 2.2.2.3.1 Valeurs disponibles par variables colSums(!is.na(voyages)) ## intraamer voyageid adlt1imp adlt2imp adlt3imp adpsale1 ## 36002 36002 1579 398 3118 1272 ## adpsale2 adult1 adult2 adult3 adult4 adult5 ## 86 749 0 53 0 0 ## adult6 adult7 arrport arrport2 boy1 boy2 ## 1 4207 10399 154 810 183 ## boy3 boy4 boy5 boy6 boy7 boyrat1 ## 2936 134 65 24 3466 901 ## boyrat3 boyrat7 captaina captainb captainc chil1imp ## 3040 3466 31943 3552 200 1579 ## chil2imp chil3imp child1 child2 child3 child4 ## 276 3118 533 71 255 5 ## child5 child6 child7 chilrat1 chilrat3 chilrat7 ## 0 1 4207 1579 3118 4207 ## constreg crew crew1 crew2 crew3 crew4 ## 9089 40 12718 305 2281 1525 ## crew5 crewdied d1slatra d1slatrb d1slatrc datarr32 ## 299 4450 6634 7736 8830 18066 ## datarr33 datarr34 datarr36 datarr37 datarr38 datarr39 ## 21027 24280 493 559 559 18 ## datarr40 datarr41 datarr43 datarr44 datarr45 ddepam ## 26 28 10446 10852 11376 5634 ## ddepamb ddepamc deptregimp deptregimp1 dlslatra dlslatrb ## 5732 6358 31610 31610 8243 9290 ## dlslatrc embport embport2 embreg embreg2 evgreen ## 11089 15709 974 15644 971 36002 ## fate fate2 fate3 fate4 female1 female2 ## 36002 36002 36002 36002 191 23 ## female3 female4 female5 female6 female7 feml1imp ## 395 5 0 3 3939 1090 ## feml2imp feml3imp girl1 girl2 girl3 girl4 ## 47 3432 730 128 2822 122 ## girl5 girl6 girl7 girlrat1 girlrat3 girlrat7 ## 48 24 3466 901 3040 3466 ## guns infant1 infant2 infant3 infant4 infant5 ## 6167 124 1 161 7 0 ## infant6 jamcaspr majbuypt majbyimp majbyimp1 majselpt ## 0 954 21641 34320 34320 25602 ## male1 male2 male3 male4 male5 male6 ## 194 45 396 8 0 4 ## male7 male1imp male2imp male3imp malrat1 malrat3 ## 3939 1090 47 3432 1090 3432 ## malrat7 men1 men2 men3 men4 men5 ## 3939 909 289 3062 145 80 ## men6 men7 menrat1 menrat3 menrat7 mjbyptimp ## 29 3466 901 3040 3466 34320 ## mjselimp mjselimp1 mjslptimp natinimp national ncar13 ## 31735 31736 31736 33822 26465 1956 ## ncar15 ncar17 ndesert npafttra nppretra npprior ## 1883 1863 2325 1680 3471 3081 ## ownera ownerb ownerc ownerd ownere ownerf ## 21386 7707 4114 2690 1867 1308 ## ownerg ownerh owneri ownerj ownerk ownerl ## 805 453 191 91 32 14 ## ownerm ownern ownero ownerp plac1tra plac2tra ## 12 5 5 5 21755 2787 ## plac3tra placcons placreg portdep portret ptdepimp ## 552 9183 7464 29131 10714 31610 ## regarr regarr2 regdis1 regdis2 regdis3 regem1 ## 10366 152 25617 1270 86 21759 ## regem2 regem3 regisreg resistance retrnreg retrnreg1 ## 2782 554 7428 569 10525 10672 ## rig saild1 saild2 saild3 saild4 saild5 ## 23585 1936 2067 2006 2062 2050 ## shipname sla1port slaarriv sladafri sladamer sladvoy ## 34367 25618 18356 291 783 3914 ## slamimp slas32 slas36 slas39 slavema1 slavema3 ## 34079 2942 2444 2361 1579 3118 ## slavema7 slavemx1 slavemx3 slavemx7 slavmax1 slavmax3 ## 4207 1090 3432 3939 901 3040 ## slavmax7 slaximp slinten2 slintend sourcea sourceb ## 3466 34371 58 7294 35988 23454 ## sourcec sourced sourcee sourcef sourceg sourceh ## 15701 10638 7432 5070 3670 2769 ## sourcei sourcej sourcek sourcel sourcem sourcen ## 2030 1370 819 480 261 127 ## sourceo sourcep sourceq sourcer tonmod tonnage ## 72 30 15 5 16698 17663 ## tontype tslavesd tslavesp tslmtimp voy1imp voy2imp ## 16623 8298 1504 6477 13009 7085 ## voyage vymrtimp vymrtrat women1 women2 women3 ## 3809 6515 6477 872 337 3027 ## women4 women5 women6 women7 womrat1 womrat3 ## 143 81 27 3466 901 3040 ## womrat7 xmimpflag year5 year10 year25 year100 ## 3466 35882 36002 36002 36002 36002 ## yearaf yearam yeardep yrcons yrreg datebuy ## 36002 36002 36002 6245 4901 6625 ## datedep datedepa datedepam datedepb datedepc dateend ## 22851 22869 5630 24008 26465 10434 ## dateland1 dateland2 dateland3 dateleftafr ## 17987 477 18 8166 fonction colSums (total des valeurs) ; constante logique is.na ; opérateur d’exclusion ! 2.2.2.3.2 Valeurs disponibles pour chaque variable, représentation graphique # Préparation des données # Valeurs disponible / variables n &lt;- round(colSums((!is.na(voyages))/length(voyages$voyageid)),2) # Conversion en tableau de données variables_dispo &lt;- data.frame(n) # conversion du nom de ligne en colonne variables_dispo &lt;- rownames_to_column(variables_dispo, &quot;variable&quot;) # Graphique library(ggplot2) graphique &lt;- ggplot(data=variables_dispo, aes(x = reorder(variable, n), y=n)) + geom_segment( aes(x=reorder(variable, n), xend=reorder(variable, n), y=0, yend=n, color=&quot;#ff1744&quot;)) + geom_point( size=1, color=&quot;#ff1744&quot;, fill=alpha(&quot;#ff1744&quot;, 0.3), alpha=0.7, shape=21, stroke=1) + coord_flip() + geom_text(aes(label=scales::percent(n)), hjust=-.3, size = 3) + labs( x = &quot;&quot;, y = &quot;&quot;, title =&quot;The Trans-Atlantic Slave trade Database &quot;, subtitle = &quot;Exhaustivité des variables, en pourcentage d&#39;expéditions&quot;, caption = &quot;Source : The Trans-Atlantic Slave Trade Database (2019). \\n W. Cariou (2020)&quot;) + theme_minimal() + theme(legend.position = &quot;none&quot;,panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.text.x=element_blank()) graphique 2.2.3 Visualiser les valeurs uniques d’une variable sort(unique(voyages$natinimp)) ## [1] &quot;Denmark / Baltic&quot; &quot;France&quot; &quot;Great Britain&quot; ## [4] &quot;Netherlands&quot; &quot;Other&quot; &quot;Portugal&quot; ## [7] &quot;Portugal / Brazil&quot; &quot;Spain / Uruguay&quot; &quot;USA&quot; 2.2.4 Dénombrer le nombre de valeurs uniques d’une variable length(unique(voyages$natinimp)) ## [1] 10 2.2.5 Dénombrer le nombre de NA d’une variable sum(is.na(voyages$natinimp)) ## [1] 2180 2.3 Expéditions ajoutées à l’édition 2019 de la base Trans Atlantic slave trade Dabase Vous devez préalablement télécharger la version 2010 de la base de données (tastdb-exp-2010.sav) dans votre répertoire de travail ainsi que le script de lecture (tastdb10-spss-import.R) depuis l’adresse https://github.com/wilcar/slaves-voyages). La lecture des données par l’instruction ci-dessous. La base de donnée est importée sous le nom voyages_10. source(&quot;tastdb10-spss-import.R&quot;) Pour identifier les expéditions ajoutées à l’édition 2019 de la base de données, vous aller effectuer une jointure entre les deux bases en utilisant fonction anti_join du package dplyr. Elle renvoie toutes les lignes de la table de “gauche” pour lesquelles il n’y a pas de valeurs correspondantes dans la table de “droite”. Les termes “gauche et”droite\" renvoient à la position des arguments d’anti_join, voyages étant à gauche devoyage_10`. voyages_nouv1 &lt;- anti_join(voyages, voyages_10, by =&quot;voyageid&quot;) voyages_nouv1 %&gt;% count(year100, national) %&gt;% arrange(year100, -n) ## # A tibble: 34 x 3 ## year100 national n ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 1500 &lt;NA&gt; 395 ## 2 1500 France 3 ## 3 1500 Portugal 2 ## 4 1500 Spain 2 ## 5 1600 &lt;NA&gt; 206 ## 6 1600 Great Britain 41 ## 7 1600 Spain 22 ## 8 1600 Portugal 8 ## 9 1600 Netherlands 6 ## 10 1600 USA 4 ## # ... with 24 more rows voyages_nouv1 %&gt;% count(year100, ptdepimp) %&gt;% arrange(year100, -n) ## # A tibble: 86 x 3 ## year100 ptdepimp n ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 1500 &lt;NA&gt; 274 ## 2 1500 San Lucar 71 ## 3 1500 Seville 17 ## 4 1500 Canary Islands 13 ## 5 1500 Lisbon 13 ## 6 1500 Tenerife 9 ## 7 1500 Cadiz 3 ## 8 1500 Portugal, port unspecified 1 ## 9 1500 Spanish Circum-Caribbean, unspecified 1 ## 10 1600 &lt;NA&gt; 185 ## # ... with 76 more rows "],
["manipulation-des-données.html", "Chapter 3 Manipulation des données 3.1 Préalables 3.2 Sélectionner des colonnes 3.3 Ordonner les lignes en fonction des colonnes 3.4 Filtrage de lignes 3.5 Exemples", " Chapter 3 Manipulation des données 3.1 Préalables 3.1.1 Tidyverse dplyr : grammaire de manipulation des tableaux de données. stringr : manipulation de chaînes de caractères. tidyr : Modification des formats de tableaux de données, opérations sur les données manquantes, séparation et réunion de valeurs au sein des cellules. Les package dplyr et stringr font partie de l’écosystème tidyverse. Le tidyverse peut-être installé via l’interface graphique de RStudio ou la commande : install.packages(&quot;tidyverse&quot;) 3.1.2 Appel des packages La fonction library permet de charger le package et de rendre les fonctionnalités de celui-ci disponibles. elle doit être exécutée à chaque session. Il est possible d’appeler chaque package individuellement ou d’appeler la totalité du tidyverse. # syntaxe 1 library(dplyr, stringr, tidyr) # syntaxe 2 library(dplyr) library(stringr) library(tidyr) # syntaxe 3 library(tidyverse) 3.1.3 Mini-jeu de données utilisé comme exemple Nous utiliserons un mini-jeu de données extrait de la TastDB pour illustrer les métohdes de manipulation de données. Il porte le nom de reprex1. si vous souhaitez reproduire les exemples à suivre, exécutez l’instruction ci-dessous afin de disposer de reprex1 dans votre environnement. (fichiers “tastdb-spss-import.R” et “tastdb-exp-2019.sav” disponibles à l’adresse https://github.com/wilcar/slaves-voyages requis dans répertoire de travail) source(&quot;tastdb-spss-import.R&quot;) exped &lt;-c(30002, 30003, 30015, 33748, 32465, 30020, 30022, 30903, 32726, 21561) library(dplyr) reprex1 &lt;- voyages %&gt;% select(voyageid, slaximp, yearam, ptdepimp, shipname, ownera, ownerb) %&gt;% filter(ptdepimp ==&quot;Nantes&quot;| ptdepimp ==&quot;Bordeaux&quot; | ptdepimp ==&quot;Le Havre&quot;) %&gt;% filter(voyageid %in% exped)) 3.1.3.1 Visualisation sou la forme de table html html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #hmntdhgepa .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #hmntdhgepa .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hmntdhgepa .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #hmntdhgepa .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #hmntdhgepa .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hmntdhgepa .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hmntdhgepa .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #hmntdhgepa .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #hmntdhgepa .gt_column_spanner_outer:first-child { padding-left: 0; } #hmntdhgepa .gt_column_spanner_outer:last-child { padding-right: 0; } #hmntdhgepa .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #hmntdhgepa .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #hmntdhgepa .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #hmntdhgepa .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #hmntdhgepa .gt_from_md > :first-child { margin-top: 0; } #hmntdhgepa .gt_from_md > :last-child { margin-bottom: 0; } #hmntdhgepa .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #hmntdhgepa .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #hmntdhgepa .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hmntdhgepa .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #hmntdhgepa .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hmntdhgepa .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #hmntdhgepa .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hmntdhgepa .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hmntdhgepa .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #hmntdhgepa .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hmntdhgepa .gt_sourcenote { font-size: 90%; padding: 4px; } #hmntdhgepa .gt_left { text-align: left; } #hmntdhgepa .gt_center { text-align: center; } #hmntdhgepa .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #hmntdhgepa .gt_font_normal { font-weight: normal; } #hmntdhgepa .gt_font_bold { font-weight: bold; } #hmntdhgepa .gt_font_italic { font-style: italic; } #hmntdhgepa .gt_super { font-size: 65%; } #hmntdhgepa .gt_footnote_marks { font-style: italic; font-size: 65%; } voyageid slaximp yearam ptdepimp shipname ownera ownerb 21561 459 1672 Le Havre NA Compagnie des Indes Occidentales NA 30002 592 1709 Nantes Duc de Bretagne Compagnie royale de Guinee NA 30003 275 1709 Nantes César Garde, Pierre de la* NA 30015 316 1711 Nantes Duc de Bretagne Bossinet, Jullien NA 30020 300 1713 Nantes Luzançay Montaudoin Delaunay, Thomas NA 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Jacques 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frères)* 32465 105 1719 Le Havre Duc de Luxembourg Compagnie du Sénégal NA 32726 144 1787 Le Havre Duc de Normandie Ruellan* NA 33748 105 1686 Bordeaux Saint-Jean Baptiste Compagnie du Sénégal Dhariette, Etienne (Cie royale d'Afrique 3.1.3.2 Visualisation sou la forme de table brute Le tibble révèle les dimensions du tableau ainsi que le type de chaque colonne, ce qui vous permet de savoir si une variable est, par exemple, &lt;chr&gt;ou &lt;dble&gt;(caractère versus numérique). La tableau est de largeur fixe. Vous noterez que les valeurs textuelles peuvent être tronquées (signe ~) afin que ne conserver qu’une seule ligne par observation. ## # A tibble: 10 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 21561 459 1672 Le Havre &lt;NA&gt; Compagnie des~ &lt;NA&gt; ## 2 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 3 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 4 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 5 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 6 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Ja~ ## 7 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frè~ ## 8 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 9 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 10 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etie~ 3.1.4 L’opérateur %&gt;% (piping operator) Il constitue l’élément majeur de la grammaire de dplyr et permet de convertir un code complexe en une chaîne claire de manipulation des données. Ainsi, si nous nous souhaitons classer les expéditions du tableau reprex1 chronologiquement puis sélectionner les expéditions nantaises. Nous pouvons écrire cette instruction : chrono &lt;- arrange(filter(reprex1, ptdepimp ==&quot;Nantes&quot;), yearam) Il s’agit de la manière traditionnelle d’écrire une instruction par imbrication de fonctions. Pour gagner en lisibilité, il est également possible d’opter pour la création de tableaux intermédiaires avec pour inconvénient de multiplier des tableaux de données qui n’ont pas vocation à être conservés : chrono1 &lt;- arrange(reprex1, yearam) chrono2 &lt;- filter(chrono1, ptdepimp ==&quot;Nantes&quot;) rm(chrono1) La dernière option qui intègre les %&gt;% rendent le code plus efficace et plus lisible : # Exemple de pipe chrono &lt;- reprex1 %&gt;% arrange(yearam) %&gt;% filter(ptdepimp==&quot;Nantes&quot;) Le tableau de données sur lequel va porter les opérations de tri et de filtrage (reprex1) est déclaré à gauche du premier opérateur “pipe” évitant ainsi de l’employer comme premier argument des fonctions arrange et filter. :bulb: Raccourcis clavier du %&gt;% : Ctrl + maj. + M (Windows). 3.1.5 Références https://suzan.rbind.io/2018/01/dplyr-tutorial-1/#selecting-columns https://larmarange.github.io/analyse-R/ 3.2 Sélectionner des colonnes Fonction select. 3.2.1 Opérations courantes Pour sélectionner quelques colonnes, ajoutez simplement leurs noms ou leur position d’index comme arguments de la fonction select. L’ordre dans lequel vous les ajoutez déterminera l’ordre dans lequel elles seront ordonnées. 3.2.1.1 Sélection d’une colonne repérée par son nom reprex1 %&gt;% select(shipname) ## # A tibble: 10 x 1 ## shipname ## &lt;chr&gt; ## 1 &lt;NA&gt; ## 2 Duc de Bretagne ## 3 César ## 4 Duc de Bretagne ## 5 Luzançay ## 6 Affriquain ## 7 Corisante ## 8 Duc de Luxembourg ## 9 Duc de Normandie ## 10 Saint-Jean Baptiste 3.2.1.2 Sélection d’une colonne repérée par sa position d’index reprex1 %&gt;% select(5) ## # A tibble: 10 x 1 ## shipname ## &lt;chr&gt; ## 1 &lt;NA&gt; ## 2 Duc de Bretagne ## 3 César ## 4 Duc de Bretagne ## 5 Luzançay ## 6 Affriquain ## 7 Corisante ## 8 Duc de Luxembourg ## 9 Duc de Normandie ## 10 Saint-Jean Baptiste 3.2.1.3 Sélection de colonnes multiples (noms de variables) reprex1 %&gt;% select(shipname, ptdepimp, voyageid, yearam, slaximp) ## # A tibble: 10 x 5 ## shipname ptdepimp voyageid yearam slaximp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &lt;NA&gt; Le Havre 21561 1672 459 ## 2 Duc de Bretagne Nantes 30002 1709 592 ## 3 César Nantes 30003 1709 275 ## 4 Duc de Bretagne Nantes 30015 1711 316 ## 5 Luzançay Nantes 30020 1713 300 ## 6 Affriquain Nantes 30022 1713 316 ## 7 Corisante Nantes 30903 1770 611 ## 8 Duc de Luxembourg Le Havre 32465 1719 105 ## 9 Duc de Normandie Le Havre 32726 1787 144 ## 10 Saint-Jean Baptiste Bordeaux 33748 1686 105 3.2.1.4 Sélection de colonnes multiples (position d’index) reprex1 %&gt;% select(4, 3, 2, 1, 5) ## # A tibble: 10 x 5 ## ptdepimp yearam slaximp voyageid shipname ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Le Havre 1672 459 21561 &lt;NA&gt; ## 2 Nantes 1709 592 30002 Duc de Bretagne ## 3 Nantes 1709 275 30003 César ## 4 Nantes 1711 316 30015 Duc de Bretagne ## 5 Nantes 1713 300 30020 Luzançay ## 6 Nantes 1713 316 30022 Affriquain ## 7 Nantes 1770 611 30903 Corisante ## 8 Le Havre 1719 105 32465 Duc de Luxembourg ## 9 Le Havre 1787 144 32726 Duc de Normandie ## 10 Bordeaux 1686 105 33748 Saint-Jean Baptiste 3.2.1.5 Sélection de colonnes contiguës Vous pouvez également sélectionner des blocs de colonnes ,c’est à dire des colonnes contiguës à l’aide du signe :. L’instruction ci-dessous permet de sélectionner les colonnes de 2 à 4. reprex1 %&gt;% select(2:4) ## # A tibble: 10 x 3 ## slaximp yearam ptdepimp ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 459 1672 Le Havre ## 2 592 1709 Nantes ## 3 275 1709 Nantes ## 4 316 1711 Nantes ## 5 300 1713 Nantes ## 6 316 1713 Nantes ## 7 611 1770 Nantes ## 8 105 1719 Le Havre ## 9 144 1787 Le Havre ## 10 105 1686 Bordeaux 3.2.1.6 Sélection par exclusion Une alternative consiste à désélectionner des colonnes en ajoutant un signe moins. Dans l’exemple ci-dessous, toutes les colonnes sont sléectionnées sauf la deuxième. reprex1 %&gt;% select(-2) ## # A tibble: 10 x 6 ## voyageid yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 21561 1672 Le Havre &lt;NA&gt; Compagnie des In~ &lt;NA&gt; ## 2 30002 1709 Nantes Duc de Breta~ Compagnie royale~ &lt;NA&gt; ## 3 30003 1709 Nantes César Garde, Pierre de~ &lt;NA&gt; ## 4 30015 1711 Nantes Duc de Breta~ Bossinet, Jullien &lt;NA&gt; ## 5 30020 1713 Nantes Luzançay Montaudoin Delau~ &lt;NA&gt; ## 6 30022 1713 Nantes Affriquain Montaudoin* Montaudouin, Jacques ## 7 30903 1770 Nantes Corisante Montaudoin Montaudoin (Frères)* ## 8 32465 1719 Le Havre Duc de Luxem~ Compagnie du Sén~ &lt;NA&gt; ## 9 32726 1787 Le Havre Duc de Norma~ Ruellan* &lt;NA&gt; ## 10 33748 1686 Bordeaux Saint-Jean B~ Compagnie du Sén~ Dhariette, Etienne ~ 3.2.1.7 Compléter une sélection par les colonnes non encore sélectionnées Lorsque vous réagencez un tableau, La fonction-raccourcis everything()sélectionne l’ensemble des colonnes non encore sélectionnées. Notez que la fonction everything n’est pas suivi d’arguments, d’où les parenthèses vides. reprex1 %&gt;% select(yearam, everything()) ## # A tibble: 10 x 7 ## yearam voyageid slaximp ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1672 21561 459 Le Havre &lt;NA&gt; Compagnie des~ &lt;NA&gt; ## 2 1709 30002 592 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 3 1709 30003 275 Nantes César Garde, Pierre~ &lt;NA&gt; ## 4 1711 30015 316 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 5 1713 30020 300 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 6 1713 30022 316 Nantes Affriquain Montaudoin* Montaudouin, Ja~ ## 7 1770 30903 611 Nantes Corisante Montaudoin Montaudoin (Frè~ ## 8 1719 32465 105 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 9 1787 32726 144 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 10 1686 33748 105 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etie~ 3.2.2 Opérations particulières 3.2.2.1 Ré-agencer des colonnes alphabétiquement Vous devez imbriquer les fonction selectet sort. Cette dernière prend comme argument le signe .qui signifie “toutes les colonnes”. reprex1 %&gt;% select(sort(names(.))) ## # A tibble: 10 x 7 ## ownera ownerb ptdepimp shipname slaximp voyageid yearam ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Compagnie des ~ &lt;NA&gt; Le Havre &lt;NA&gt; 459 21561 1672 ## 2 Compagnie roya~ &lt;NA&gt; Nantes Duc de Bre~ 592 30002 1709 ## 3 Garde, Pierre ~ &lt;NA&gt; Nantes César 275 30003 1709 ## 4 Bossinet, Jull~ &lt;NA&gt; Nantes Duc de Bre~ 316 30015 1711 ## 5 Montaudoin Del~ &lt;NA&gt; Nantes Luzançay 300 30020 1713 ## 6 Montaudoin* Montaudouin, Ja~ Nantes Affriquain 316 30022 1713 ## 7 Montaudoin Montaudoin (Frè~ Nantes Corisante 611 30903 1770 ## 8 Compagnie du S~ &lt;NA&gt; Le Havre Duc de Lux~ 105 32465 1719 ## 9 Ruellan* &lt;NA&gt; Le Havre Duc de Nor~ 144 32726 1787 ## 10 Compagnie du S~ Dhariette, Etie~ Bordeaux Saint-Jean~ 105 33748 1686 3.3 Ordonner les lignes en fonction des colonnes La fonction arrange réordonne les lignes d’un tableau selon une ou plusieurs colonnes. La fonction sort()de R Base ne peut être utilisée à la place de la fonction arrange. 3.3.1 Tri à partir d’une colonne unique 3.3.1.1 Tri ascendant reprex1 %&gt;% arrange(yearam) ## # A tibble: 10 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 21561 459 1672 Le Havre &lt;NA&gt; Compagnie des~ &lt;NA&gt; ## 2 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etie~ ## 3 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 4 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 5 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 6 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 7 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Ja~ ## 8 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 9 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frè~ ## 10 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; 3.3.1.2 Tri descendant Deux syntaxes sont possibles pour trier des colonnes de manières décroissante. # première syntaxe (desc) reprex1 %&gt;% arrange(desc(slaximp)) ## # A tibble: 10 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frè~ ## 2 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 3 21561 459 1672 Le Havre &lt;NA&gt; Compagnie des~ &lt;NA&gt; ## 4 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 5 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Ja~ ## 6 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 7 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 8 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 9 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 10 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etie~ # seconde syntaxe (signe moins) reprex1 %&gt;% arrange(-slaximp) ## # A tibble: 10 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frè~ ## 2 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 3 21561 459 1672 Le Havre &lt;NA&gt; Compagnie des~ &lt;NA&gt; ## 4 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 5 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Ja~ ## 6 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 7 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 8 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 9 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 10 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etie~ 3.3.2 Tri selon plusieurs colonnes L’ordre dans lequel vous ajoutez les noms de colonnes déterminera l’ordre de tri du tableau. Dans l’exemple ci-dessous, le tableau et d’abord réagencé par année (yearam) et pour chaque année les expéditions sont triées par port de départ (ptdepimp) et enfin par nom de navire (shpiname). reprex1 %&gt;% arrange(yearam, ptdepimp, shipname) ## # A tibble: 10 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 21561 459 1672 Le Havre &lt;NA&gt; Compagnie des~ &lt;NA&gt; ## 2 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etie~ ## 3 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 4 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 5 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 6 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Ja~ ## 7 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 8 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 9 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frè~ ## 10 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; 3.4 Filtrage de lignes La fonction filter permet de sélectionner des lignes d’un tableau de données. 3.4.1 Filtrage en fonction d’une colonne 3.4.1.1 Filtrage portant sur des données textuelles 3.4.1.1.1 Filtrage, correspondance exacte Pour effectuer un filtrage portant sur une chaîne de caractère exacte, nous employons le signe d’égalité ==. Attention à encadrer la chaîne de caractère par des guillemets doubles. Lorsqu’il s’agit d’exprimer la négation, le signe de l’exclusion ! est ajouté comme préfixe au nom de colonne sur laquelle port le filtrage. :warning: le signe ! ne remplace pas le signe d’égalité ==). reprex1 %&gt;% filter (ptdepimp == &quot;Nantes&quot;) ## # A tibble: 6 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bret~ Compagnie royale ~ &lt;NA&gt; ## 2 30003 275 1709 Nantes César Garde, Pierre de ~ &lt;NA&gt; ## 3 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jullien &lt;NA&gt; ## 4 30020 300 1713 Nantes Luzançay Montaudoin Delaun~ &lt;NA&gt; ## 5 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin,~ ## 6 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (~ reprex1 %&gt;% filter (!ptdepimp == &quot;Nantes&quot;) ## # A tibble: 4 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 21561 459 1672 Le Havre &lt;NA&gt; Compagnie des~ &lt;NA&gt; ## 2 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 3 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 4 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etien~ Il est possible d’effectuer un filtrage portant sur plusieurs valeurs textuelles en employant le signe de l’alternation |. reprex1 %&gt;% filter (ptdepimp == &quot;Nantes&quot; | ptdepimp ==&quot;Bordeaux&quot;) ## # A tibble: 7 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 2 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 3 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 4 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 5 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Jac~ ## 6 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frèr~ ## 7 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etien~ 3.4.1.1.2 Filtrage, correspondance partielle. Pour effectuer un filtrage “plein texte” c’est à dire non pas sur une chaîne de caractères exacte mais sur une chaîne de caractère partielle, il est nécessaire d’utiliser la fonction str_detectissue du package stringr. Ce package fait parti du (tidyverse). reprex1 %&gt;% filter(str_detect(shipname, &quot;Duc&quot;)) ## # A tibble: 4 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bretagne Compagnie royale de ~ &lt;NA&gt; ## 2 30015 316 1711 Nantes Duc de Bretagne Bossinet, Jullien &lt;NA&gt; ## 3 32465 105 1719 Le Havre Duc de Luxembou~ Compagnie du Sénégal &lt;NA&gt; ## 4 32726 144 1787 Le Havre Duc de Normandie Ruellan* &lt;NA&gt; L’expression de la négation est similaire au filtrage portant sur une chaîne exacte. reprex1 %&gt;% filter(!str_detect(shipname, &quot;Bretagne&quot;)) ## # A tibble: 7 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 2 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 3 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Jac~ ## 4 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frèr~ ## 5 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 6 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 7 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etien~ La fonction str_detect permet d’effectuer des recherches portant sur des séquences de caractères litérales ou également des expression régulières qui étendent les possibilités de correspondance. Ainsi, le signe de l’alternation peut-être directement employé dans le motif de recherche. reprex1 %&gt;% filter(str_detect(shipname, &quot;Bretagne|Normandie|Luxembourg&quot;)) ## # A tibble: 4 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bretagne Compagnie royale de ~ &lt;NA&gt; ## 2 30015 316 1711 Nantes Duc de Bretagne Bossinet, Jullien &lt;NA&gt; ## 3 32465 105 1719 Le Havre Duc de Luxembou~ Compagnie du Sénégal &lt;NA&gt; ## 4 32726 144 1787 Le Havre Duc de Normandie Ruellan* &lt;NA&gt; 3.4.1.2 Filtrage, valeurs numériques 3.4.1.2.1 Filtrage selon une valeur numérique reprex1 %&gt;% filter(yearam == 1709) ## # A tibble: 2 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bretag~ Compagnie royale de Gu~ &lt;NA&gt; ## 2 30003 275 1709 Nantes César Garde, Pierre de la* &lt;NA&gt; 3.4.1.2.2 Filtrage selon un intervalle de valeurs reprex1 %&gt;% filter(slaximp &gt;= 100 &amp; slaximp &lt;= 300) ## # A tibble: 5 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 2 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 3 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 4 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 5 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etien~ 3.4.1.3 Filtrage basé sur un vecteur La fonction filter supporte la vectorisation et simplifie le filtrage portant sur un grand nombre de valeurs. On fait référence au vecteur avec l’opérateur %in%. Deux approches sont possibles. Le vecteur peut-être directement construit dans filter ou au préalable. reprex1 %&gt;% filter(yearam %in% c(1709, 1767, 1686)) ## # A tibble: 3 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bret~ Compagnie ro~ &lt;NA&gt; ## 2 30003 275 1709 Nantes César Garde, Pierr~ &lt;NA&gt; ## 3 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du~ Dhariette, Etienn~ dates &lt;- c(1709, 1767, 1686) reprex1 %&gt;% filter(yearam %in% dates) ## # A tibble: 3 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bret~ Compagnie ro~ &lt;NA&gt; ## 2 30003 275 1709 Nantes César Garde, Pierr~ &lt;NA&gt; ## 3 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du~ Dhariette, Etienn~ 3.4.1.4 Filtrage des observations manquantes Pour filtrer les lignes vides, il existe trois syntaxes différentes. Vous pouvez annuler la fonction logique is.na() par le signe ! ou vous pouvez utiliser la fonction complete.cases ou la fonction drop_na du package tidyrappartenant au tidyverse. Les exemples ci-dessous ne conserverons que les lignes dont le nom du navire est connu. reprex1 %&gt;% filter(!is.na(shipname)) ## # A tibble: 9 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 2 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 3 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 4 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 5 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Jac~ ## 6 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frèr~ ## 7 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 8 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 9 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etien~ reprex1 %&gt;% filter(complete.cases(shipname)) ## # A tibble: 9 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 2 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 3 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 4 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 5 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Jac~ ## 6 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frèr~ ## 7 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 8 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 9 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etien~ reprex1 %&gt;% drop_na(shipname) ## # A tibble: 9 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30002 592 1709 Nantes Duc de Bret~ Compagnie roy~ &lt;NA&gt; ## 2 30003 275 1709 Nantes César Garde, Pierre~ &lt;NA&gt; ## 3 30015 316 1711 Nantes Duc de Bret~ Bossinet, Jul~ &lt;NA&gt; ## 4 30020 300 1713 Nantes Luzançay Montaudoin De~ &lt;NA&gt; ## 5 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Jac~ ## 6 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frèr~ ## 7 32465 105 1719 Le Havre Duc de Luxe~ Compagnie du ~ &lt;NA&gt; ## 8 32726 144 1787 Le Havre Duc de Norm~ Ruellan* &lt;NA&gt; ## 9 33748 105 1686 Bordeaux Saint-Jean ~ Compagnie du ~ Dhariette, Etien~ Ce dernier exemple utilise drop_na()sans arguments pour filtrer lignes contenant des observations manquantes dans n’importe quell colonne. reprex1 %&gt;% drop_na() ## # A tibble: 3 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, Jacqu~ ## 2 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (Frères~ ## 3 33748 105 1686 Bordeaux Saint-Jean B~ Compagnie ~ Dhariette, Etienne~ 3.4.2 Filtrage en fonction de plusieurs colonnes 3.4.2.1 Utilisation de la fonction filter demo &lt;- reprex1 %&gt;% filter(slaximp == 100 &amp; ptdepimp == &quot;Bordeaux&quot;) demo &lt;- reprex1 %&gt;% filter(slaximp == 100) %&gt;% filter (ptdepimp == &quot;Bordeaux&quot;) 3.4.2.2 Utilisation de la fonction filter_at La fonction filter_at vous permet d’effectuer un filtrage sur des colonnes spécifiées par l’argument vars(). Le deuxième argument est la condition de sélection. vous pouvez utiliser all_vars()si toutes les colonnes doivent retourner VRAI (ET équivalent), ou any_vars()dans le cas où une seule variable doit retourner VRAI (OU équivalent). Dans l’exemple ci-dessous nous cherchons à filtrer les expéditions dont les navires sont la propriétés de plusieurs Montaudoin (ownera et ownerb). Notez l’utilisation du signe .qui fait fait référence aux variables précédemment déclarés dans l’argument vars(). demo &lt;- reprex1 %&gt;% filter_at(vars(ownera:ownerb), any_vars(str_detect(.,&quot;Montaudoin&quot;))) print(demo) ## # A tibble: 3 x 7 ## voyageid slaximp yearam ptdepimp shipname ownera ownerb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 30020 300 1713 Nantes Luzançay Montaudoin Delauna~ &lt;NA&gt; ## 2 30022 316 1713 Nantes Affriquain Montaudoin* Montaudouin, ~ ## 3 30903 611 1770 Nantes Corisante Montaudoin Montaudoin (F~ 3.5 Exemples 3.5.1 Femmes propriétaires de navires nantais armés pour la traite atlantique Nous stockons dans le tableau ntes une déclinaison du tableau de données voyages. Il s’agit de ne conserver que les expéditions au départ de Nantes et de positionner les colonnes correspondants aux propriétaires parmi les premières colonnes afin de faciliter la lecture directe des données. ntes &lt;- voyages %&gt;% filter(ptdepimp == &quot;Nantes&quot;) %&gt;% select(voyageid, shipname, ptdepimp, yeardep, ownera:ownerd) Une observation directe des données nous permet de constater que, bien que les prénoms des hommes sont communément mentionnés, ceux des femmes n’apparaissent pas. Pour autant plusieurs noms de propriétaires suivis de l’abréviation (Vve) attirent notre attention. Il s’agit de veuves que l’on retrouve fréquemment associées à leurs fils html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #udfhifdipq .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #udfhifdipq .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #udfhifdipq .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #udfhifdipq .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #udfhifdipq .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #udfhifdipq .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #udfhifdipq .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #udfhifdipq .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #udfhifdipq .gt_column_spanner_outer:first-child { padding-left: 0; } #udfhifdipq .gt_column_spanner_outer:last-child { padding-right: 0; } #udfhifdipq .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #udfhifdipq .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #udfhifdipq .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #udfhifdipq .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #udfhifdipq .gt_from_md > :first-child { margin-top: 0; } #udfhifdipq .gt_from_md > :last-child { margin-bottom: 0; } #udfhifdipq .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #udfhifdipq .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #udfhifdipq .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #udfhifdipq .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #udfhifdipq .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #udfhifdipq .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #udfhifdipq .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #udfhifdipq .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #udfhifdipq .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #udfhifdipq .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #udfhifdipq .gt_sourcenote { font-size: 90%; padding: 4px; } #udfhifdipq .gt_left { text-align: left; } #udfhifdipq .gt_center { text-align: center; } #udfhifdipq .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #udfhifdipq .gt_font_normal { font-weight: normal; } #udfhifdipq .gt_font_bold { font-weight: bold; } #udfhifdipq .gt_font_italic { font-style: italic; } #udfhifdipq .gt_super { font-size: 65%; } #udfhifdipq .gt_footnote_marks { font-style: italic; font-size: 65%; } voyageid shipname ptdepimp yeardep ownera ownerb ownerc ownerd 119 Aimable Henriette Nantes 1821 Chardonneau, Richard NA NA NA 121 Aurore Nantes 1820 Lepertière NA NA NA 344 Aimable Henriette Nantes 1822 Chardonneau, Frédéric NA NA NA 345 Marie Nantes 1822 Dennis, Pierre-Thomas NA NA NA 2860 Louise Nantes 1829 Landaluze (Vve) NA NA NA 30202 Monarque Nantes 1727 Bertrand (Vve) Bertrand (Fils)* NA NA Vous pouvez donc filtrer les lignes correspondants aux veuves comme ownera ou ownerb en utilisant la fonction str_detect (le signe | correspondant à l’opérateur logique OU). ntes_vves &lt;- voyages %&gt;% filter(ptdepimp == &quot;Nantes&quot;) %&gt;% select(voyageid, shipname, ptdepimp, yeardep, ownera:ownerd) %&gt;% filter(str_detect(ownera, &quot;Vve&quot;) | str_detect(ownerb, &quot;Vve&quot;) | str_detect(ownerc, &quot;Vve&quot;)) La participation des femmes au commerce maritime ne concerne pas uniquement les veuves. Des femmes mariées y participent travaillant avec leur époux ou en exerçant le commerce à leur compte. ainsi une lecture plus attentive permet de repérer la précision (Dame) pour l’un des propriétaires de l’expédition 30362. voyageid shipname ptdepimp yeardep ownera ownerb ownerc ownerd 30362 Saint René Nantes 1739 Bertrand (Dame) Bertrand (Fils)* NA NA Vous pouvez, par conséquent, compléter chaque motif de recherche Vvepar l’alternative Dame. ntes_femmes1 &lt;- voyages %&gt;% filter(ptdepimp == &quot;Nantes&quot;) %&gt;% select(voyageid, shipname, ptdepimp, yeardep, ownera:ownerd) %&gt;% filter(str_detect(ownera, &quot;Vve|Dame&quot;) | str_detect(ownerb, &quot;Vve|Dame&quot;) | str_detect(ownerc, &quot;Vve|Dame&quot;)) Enfin, une autre approche est également possible en faisant appel à la fonction filter_at. ntes_femmes2 &lt;- voyages %&gt;% filter(ptdepimp == &quot;Nantes&quot;) %&gt;% select(voyageid, shipname, ptdepimp, yeardep, ownera:ownerd) %&gt;% filter_at(vars(ownera:ownerd), any_vars(str_detect(.,&quot;Vve|Dame&quot;))) Référence : Nicole Dufournaud et Bernard Michon, « Les femmes et le commerce maritime à Nantes (1660-1740) : un rôle largement méconnu », Clio. Histoire‚ femmes et sociétés [En ligne], 23 | 2006, mis en ligne le 01 juin 2008, consulté le 30 mars 2020. URL : http://journals.openedition.org/clio/1926 ; DOI : https://doi.org/10.4000/clio.1926 "],
["chronologies.html", "Chapter 4 Chronologies 4.1 Préalables 4.2 Chronologie globale de la traite 4.3 Chronologies comparatives de la traite 4.4 Exemples", " Chapter 4 Chronologies Une série temporelle ou chronologique (nous utiliserons les deux termes indifféremment) correspond à une série d’observations réalisées au cours du temps. 4.1 Préalables 4.1.1 Packages 4.1.2 Thème personnalisé gpglot2 Les graphiques construits avec le package ggplot2 ont en commun un thème appelé my_theme_chrono1 défini à l’aide d’une fonction. my_theme_chrono1 &lt;- function() {theme(plot.caption =element_text(colour = &quot;grey25&quot;), plot.subtitle = element_text(colour = &quot;grey25&quot;), axis.line.y = element_blank(), panel.background = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.y = element_line( size=.1, color=&quot;grey&quot;, linetype = &quot;dashed&quot;), axis.ticks.y = element_blank(), axis.text.y.left = element_text(vjust = -0.9), axis.line.x = element_blank())} 4.1.2.1 Tidyverse dplyr : grammaire de manipulation des tableaux de données. stringr : manipulation de chaînes de caractères. ggplot2 :graphiques avancés. 4.1.2.2 Autres packages ggpmisc, ggrepel, gganimate : extensions du package ggplot2. zoo :package utilisée dans le calcul des moyennes mobiles. 4.1.2.3 Appel des packages La fonction library permet de charger un package et de rendre ses fonctionnalités disponibles. Elle doit être exécutée à chaque session. library(tidyverse) library(ggpmisc) library(ggrepel) library(gganimate) library(zoo) 4.2 Chronologie globale de la traite 4.2.1 Bornes chronologiques et durée de la traite Vous pouvez obtenir des résumés des données par des instructions en base R ou par la fonction summarise du package dplyr. R base retourne les résultats sous la forme de valeurs contrairement à dplyr qui les retourne sous la forme d’un objet de type data.frame. Première mention d’une expédition (Base R) min(voyages$yearam) ## [1] 1514 Ultime mention d’une expédition (Base R) max(voyages$yearam) ## [1] 1866 Durée (étendue) (Base R) max(voyages$yearam)-min(voyages$yearam) ## [1] 352 Package dplyr (package dplyr) voyages %&gt;% summarise(date_max=max(yearam), date_min=min(yearam)) ## # A tibble: 1 x 2 ## date_max date_min ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1866 1514 4.2.2 Expéditions de traite 4.2.2.1 Tableau d’effectifs Il s’agit de compter, pour chacune des valeurs de la variable yearam, le nombre d’observations ayant cette valeur. Ce « nombre de fois » s’appelle l’effectif. La construction d’un tableau d’effectifs appartient à la catégorie des opérations groupées dans Dplyr et s’effectue par le biais de la fonction count. La colonne d’effectifs est automatiquement appelée n. voyages %&gt;% count(yearam) ## # A tibble: 335 x 2 ## yearam n ## &lt;dbl&gt; &lt;int&gt; ## 1 1514 1 ## 2 1516 1 ## 3 1520 1 ## 4 1525 1 ## 5 1526 5 ## 6 1527 1 ## 7 1532 5 ## 8 1533 1 ## 9 1534 2 ## 10 1535 2 ## # ... with 325 more rows 4.2.2.2 Nombre moyen d’expéditions par années voyages %&gt;% count(yearam) %&gt;% summarise(moyenne=mean(n)) ## # A tibble: 1 x 1 ## moyenne ## &lt;dbl&gt; ## 1 107. 4.2.2.3 Dix années comportant le plus grand nombre d’expéditions voyages %&gt;% count(yearam) %&gt;% top_n(10) ## Selecting by n ## # A tibble: 11 x 2 ## yearam n ## &lt;dbl&gt; &lt;int&gt; ## 1 1765 339 ## 2 1766 354 ## 3 1767 332 ## 4 1770 332 ## 5 1774 359 ## 6 1790 345 ## 7 1791 347 ## 8 1792 360 ## 9 1805 351 ## 10 1806 371 ## 11 1807 395 4.2.3 Esclaves embarqués par années ⚠️ Le résultat d’un calcul portant sur des termes incluant des valeurs manquantes est une valeur manquante. Vous pouvez calculer le nombre total d’esclaves embarqués par années à condition de prendre soin d’omettre les valeurs manquantes des termes du calcul. Une rapide vérification par l’instruction ci-dessous révèle la présence de valeurs manquantes au sein de la variable slaximp. NA %in% voyages$slaximp ## [1] TRUE Prenons par exemple l’année 1653 qui comprend 10 expéditions pour lesquelles le nombre d’esclaves embarqués est partiellement connu. voyages %&gt;% filter (yearam == 1653) %&gt;% select(shipname, yearam, slaximp) ## # A tibble: 10 x 3 ## shipname yearam slaximp ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gele Zon (a) Sol 1653 340 ## 2 Gele Engel (a) Engel Gabriel 1653 380 ## 3 NS del Buen Sucesso y El Santo Cristo 1653 325 ## 4 NS del Rosario y S Antonio 1653 325 ## 5 S Maria 1653 NA ## 6 NS da Conceição e Penha da França 1653 381 ## 7 Luipaard 1653 273 ## 8 Fortuijn 1653 334 ## 9 Blinde Fortuin 1653 273 ## 10 &lt;NA&gt; 1653 406 Le résultat de l’addition du nombre d’esclaves embarqués par expédition pour l’année 1653 confirme que la présence de valeurs absentes parmi les termes d’une opération calculatoire retourne comme résultat NA. voyages %&gt;% filter (yearam == 1653) %&gt;% select(shipname, yearam, slaximp) %&gt;% summarise (n_esc = sum(slaximp)) ## # A tibble: 1 x 1 ## n_esc ## &lt;dbl&gt; ## 1 NA Vous devez donc exclure les valeurs manquantes préalablement au calcul à effectuer. Deux syntaxes sont possibles. # Syntaxe 1 voyages %&gt;% filter (!is.na(slaximp)) %&gt;% filter (yearam &gt;= 1653) %&gt;% group_by (yearam) %&gt;% summarise (n_esc = sum(slaximp)) # Syntaxe 2 voyages %&gt;% filter (complete.cases(slaximp)) %&gt;% filter (yearam &gt;= 1653) %&gt;% group_by (yearam) %&gt;% summarise (n_esc = sum(slaximp)) ## # A tibble: 214 x 2 ## yearam n_esc ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1653 3037 ## 2 1654 5488 ## 3 1655 4270 ## 4 1656 5675 ## 5 1657 4596 ## 6 1658 7037 ## 7 1659 8184 ## 8 1660 5549 ## 9 1661 5157 ## 10 1662 5290 ## # ... with 204 more rows 4.2.4 Représentations graphiques 4.2.4.1 Représentation graphique en base R Vous pouvez “piper” la fonction plot après avoir compté le nombre d’observations par années. Le résultat obtenu est un graphique de type “nuage de points”. voyages %&gt;% count(yearam) %&gt;% plot() Vous pouvez personnaliser le graphique par une géométrie de type marche d’escalier (t=\"s\") ou une courbe (t=\"l\") et le compléter par un habillage dont la taille des caractères est réglée par la fonction cex. voyages %&gt;% count(yearam) %&gt;% plot(t=&quot;s&quot;, main=&quot;Chronologie des expéditions de traite atlantique&quot;, sub=&quot;Voyages, The TransAtlantic Salve Trade Db&quot;, xlab=&quot;années&quot;, ylab=&quot;expéditions&quot;, cex.lab=0.80, cex.sub=0.75) 4.2.4.2 Représentations avancées (ggplot2) 4.2.4.2.1 Graphique en marche d’escalier Vous pouvez utiliser le package ggplot2 pour régler les intervalles des axes continus (fonction scale_x_continuous) et modifier l’apparence du graphique à l’aide d’un bibliothèque de thèmes ou en employant la fonction .theme pour des paramétrages manuels. n_exped &lt;- voyages %&gt;% count(yearam) gg_chrono1 &lt;- ggplot(n_exped, aes(x= yearam, y= n)) gg_chrono1 + geom_area (color=&quot;#d95f02&quot;, fill= alpha(&quot;#d95f02&quot;, 0.1)) + scale_x_continuous(breaks=seq(1500, 1875, by=25)) + geom_hline(yintercept=0, linetype=&quot;solid&quot;, color = &quot;grey&quot;) + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle = &quot;Expéditions&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019).Variable yearam \\n W. Cariou (2020)&quot;, x=&quot;&quot;, y=&quot;&quot;) + my_theme_chrono1() + scale_y_continuous(limits = c(-10,450), expand = c(0, 0)) 4.2.4.2.2 Graphique en marche d’escalier animé Vous pouvez animer votre graphique à l’aide du package gganimate et rajouter l’instruction +transition_reveal(yearam). library(gganimate) n_exped &lt;- voyages %&gt;% count(yearam) gg_chrono1 &lt;- ggplot(n_exped, aes(x= yearam, y= n)) gg_chrono1 + geom_step (color=&quot;#d95f02&quot;) + geom_text(aes(label = paste(&quot;année&quot;, yearam,&quot;: &quot;, n, &quot;expéd.&quot;)), size = 4, color = &quot;black&quot;, x = 1560, y = 435) + scale_x_continuous(breaks=seq(1500, 1875, by=25)) + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle = &quot;Expéditions&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019).Variable yearam \\n W. Cariou (2020)&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme(plot.caption =element_text(colour = &quot;grey25&quot;), plot.subtitle = element_text(colour = &quot;grey25&quot;), axis.line.y = element_blank(), panel.background = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.y = element_line( size=.1, color=&quot;grey&quot;, linetype = &quot;dashed&quot;), axis.ticks.y = element_blank(), axis.text.y.left = element_text(vjust = -0.9), axis.line.x = element_blank()) + scale_y_continuous(limits = c(-10,450), expand = c(0, 0)) + geom_hline(yintercept=0, linetype=&quot;solid&quot;, color = &quot;grey&quot;) + transition_reveal(yearam) 4.2.4.2.3 Dégager les principales variations Vous pouvez mettre en évidences les principaux pics (stat_peaks) et vallées (stat_valleys) par des symboles (argument shape) et les années correspondantes text_repel) en employant le package complémentaire à ggplot2, ggpmisc. Les arguments ignore_threshold et span permettant de sélectionner les variations les plus significatives. Le chevauchement des étiquettes est réglé par l’argument geom =\"text_repel\" en lien avec le package ggrepel. library(ggpmisc) library(ggrepel) n_exped_pics_vallees &lt;- voyages %&gt;% count(yearam) gg_chrono1 &lt;- ggplot(n_exped_pics_vallees , aes(x= yearam, y= n)) gg_chrono1 + geom_area(fill= alpha(&quot;#d95f02&quot;, 0.1)) + scale_x_continuous(breaks=seq(1500, 1875, by = 25)) + stat_peaks(ignore_threshold = 0.4, colour = &quot;#d95f02&quot;, span =15, segment.colour = &quot;black&quot;, size = 3, shape = 2) + stat_peaks(ignore_threshold = 0.4, colour = &quot;#d95f02&quot;, span =15, geom =&quot;text_repel&quot;, size = 3, fontface=&quot;bold&quot;) + stat_valleys(ignore_threshold = - 0.1, colour = &quot;#1b9e77&quot;, span = 15, size = 3, shape=6) + stat_valleys(ignore_threshold = - 0.1, colour = &quot;#1b9e77&quot;, span = 15, geom =&quot;text_repel&quot;, size = 3, fontface=&quot;bold&quot;) + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle = &quot;Expéditions&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019).Variable yearam \\n W. Cariou (2020)&quot;, x=&quot;&quot;, y=&quot;&quot;) + my_theme_chrono1() + scale_y_continuous(limits = c(-10,450), expand = c(0, 0)) + geom_hline(yintercept=0, linetype=&quot;solid&quot;, color = &quot;grey&quot;) 4.2.4.2.4 Dégager une tendance par lissage par moyenne mobile n_exped &lt;- voyages %&gt;% count(yearam) gg_chrono1 &lt;- ggplot(n_exped, aes(x= yearam, y= n)) gg_chrono1 + geom_area(fill= alpha(&quot;#d95f02&quot;, 0.1)) + geom_line(aes(y=rollmean(n, 25, na.pad=TRUE)), color=&quot;#1b9e77&quot;, size=1) + geom_area(aes(y=rollmean(n, 25, na.pad=TRUE)), fill=&quot;#1b9e77&quot;, size=1, alpha=.25) + scale_x_continuous(breaks=seq(1500, 1875, by=25)) + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle = &quot;Expéditions, moyenne mobile centrée fenêtre de 25 ans&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019).Variable yearam \\n W. Cariou (2020)&quot;, x=&quot;&quot;, y=&quot;&quot;) + my_theme_chrono1() + scale_y_continuous(limits = c(-10,450), expand = c(0, 0)) + geom_hline(yintercept=0, linetype=&quot;solid&quot;, color = &quot;grey&quot;) ## Warning: Removed 24 rows containing missing values (position_stack). ## Warning: Removed 24 row(s) containing missing values (geom_path). 4.2.4.2.5 Tendance et variabilité par boîtes à moustaches Vous pouvez résumer la distribution des expéditions par années regroupées en périodes par des boîte et moustache. Ce graphique trace une boîte autour du premier et troisième quartile. La médiane est figurée par le trait à l’intérieur de la boite et des moustaches sont tracées au-dessus et au-dessous de la case pour résumer l’étendue générale des observations. La boite à moustaches est dite “élaguée” car les moustaches ne correspond pas aux valeurs minimales et maximales de la série statistique. Des points sont dessinés pour les valeurs aberrantes en dehors des moustaches. n_exped25 &lt;- voyages %&gt;% count(yearam, year25) %&gt;% mutate(year25 = sub(&quot;years&quot;, &quot;&quot;, year25)) gg_chrono1 &lt;- ggplot(n_exped25, aes(x= year25, y = n)) gg_chrono1 + geom_boxplot(colour = &quot;#1b9e77&quot;, outlier.colour = &quot;#d95f02&quot;, fill= alpha(&quot;#1b9e77&quot;, 0.3)) + labs(title = &quot;Chronologie des expéditions de traite atlantique par intervalles de 25 ans&quot;, subtitle = &quot;Distribution des expéditions par années pour chaque intervalle&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019).Variable yearam \\n W. Cariou (2020)&quot;, x=&quot;&quot;, y=&quot;&quot;) + my_theme_chrono1() + geom_hline(yintercept=0, linetype=&quot;solid&quot;, color = &quot;grey&quot;) + scale_x_discrete(guide = guide_axis(n.dodge = 2)) 4.3 Chronologies comparatives de la traite 4.3.1 Chronologie des expéditions en fonction des pavillons de navires 4.3.1.1 Tableaux 4.3.1.1.1 Tableau long voyages %&gt;% count(yearam, natinimp) ## # A tibble: 1,386 x 3 ## yearam natinimp n ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 1514 Portugal / Brazil 1 ## 2 1516 Portugal / Brazil 1 ## 3 1520 &lt;NA&gt; 1 ## 4 1525 Portugal / Brazil 1 ## 5 1526 Portugal / Brazil 1 ## 6 1526 Spain / Uruguay 2 ## 7 1526 &lt;NA&gt; 2 ## 8 1527 Spain / Uruguay 1 ## 9 1532 Portugal / Brazil 3 ## 10 1532 Spain / Uruguay 1 ## # ... with 1,376 more rows 4.3.1.1.2 Tableau large (à double-entrées) La fonction pivot_wider du package tidyr(cf. tidyverse) vous permet de transformer des lignes en colonnes et ainsi passer d’un format de tableau long à un format large, où les nationalités deviennent des colonnes. names_from indique la colonne contenant les noms des nouvelles variables à créer et values_from indique la colonne contenant les valeurs de ces variables. voyages %&gt;% count(yearam, natinimp) %&gt;% pivot_wider(names_from = natinimp, values_from = n) ## # A tibble: 335 x 11 ## yearam `Portugal / Bra~ `NA` `Spain / Urugua~ `Great Britain` France ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1514 1 NA NA NA NA ## 2 1516 1 NA NA NA NA ## 3 1520 NA 1 NA NA NA ## 4 1525 1 NA NA NA NA ## 5 1526 1 2 2 NA NA ## 6 1527 NA NA 1 NA NA ## 7 1532 3 1 1 NA NA ## 8 1533 NA 1 NA NA NA ## 9 1534 2 NA NA NA NA ## 10 1535 2 NA NA NA NA ## # ... with 325 more rows, and 5 more variables: Netherlands &lt;int&gt;, `Denmark / ## # Baltic` &lt;int&gt;, USA &lt;int&gt;, Other &lt;int&gt;, Portugal &lt;int&gt; 4.3.1.2 Représentations graphiques 4.3.1.3 Représentations graphiques avancées (ggplot2) 4.3.1.3.1 Graphiques juxtaposés, échelle arithmétique La fonction facet du package ggplot2 partitionne un graphique en une matrice de panneaux en fonction de valeurs à l’instar d’un boucle. # Préparation des données flagsyears_a &lt;- voyages %&gt;% count(yearam, natinimp) %&gt;% filter(complete.cases(natinimp)) %&gt;% filter(!natinimp ==&quot;Other&quot;) # facet library(ggplot2) facet_flags &lt;- ggplot (flagsyears_a, aes(x=yearam, y=n)) + geom_step (color=&quot;#d95f02&quot;) + scale_x_continuous(breaks=seq(1500, 1875, by=50)) + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle = &quot;Pavillons&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019) variable yearam&quot;, x=&quot;&quot;, y=&quot;expéditions&quot;) + my_theme_chrono1() # Création des graphiques juxtaposés facet_flags + facet_wrap(natinimp ~ ., ncol = 2, scales=&quot;free_x&quot;) 4.3.1.3.2 Effectifs cumulés croissants, échelle logarithmique Un graphique logarithmique (ou plus précisément semi-logarithmique) est une représentation graphique d’une série statistique chronologique. Il est défini en abscisse par une échelle arithmétique du temps. Il est défini en ordonnée par une échelle logarithmique. L’utilisation de ce type de graphique n’impose pas de savoir calculer des logarithmes. Les graphiques à progression semi-logarithmique ne se lisent pas comme les graphiques à progression arithmétique. Ils permettent de comparer des rythmes d’évolution sans à avoir à effectuer des calculs. La pente donne le rythme d’évolution et non la quantité. Ils permettent également de représenter des séries statistiques de très forte amplitude dans lesquelles les valeurs se situent dans un intervalle trop grand pour permettre une bonne lisibilité de la courbe. Echelle logarithmique de base 10. On débute à 1 et non 0. Chaque fois que l’on parcours une distance, on multiple le nombre 1 par un 10 au lieu d’ajouter un nombre constant. Si on poursuit on multiple 10 par 10 ce qui fait 100. # Préparation des données flagsyears_ecc &lt;- voyages %&gt;% count(yearam, natinimp) %&gt;% group_by(natinimp) %&gt;% mutate(ecc = cumsum(n)) %&gt;% filter(complete.cases(natinimp)) %&gt;% filter(!natinimp ==&quot;Other&quot; &amp; !natinimp == &quot;Portugal&quot;) n_exped_last &lt;- flagsyears_ecc %&gt;% slice(which.max(yearam)) # library(ggplot2) log_flags &lt;- ggplot (flagsyears_ecc, aes(x=yearam, y=ecc, color=natinimp)) + geom_line() + geom_point(data = n_exped_last, aes(x = yearam, y = ecc , group=natinimp), shape = 21, fill = &quot;white&quot;, size = 1.8, stroke = 1.2) + scale_y_log10() + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle = &quot;Pavillons&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019) variable yearam&quot;, x=&quot;&quot;, y=&quot;expéditions&quot;) + my_theme_chrono1() + geom_hline(yintercept=0, linetype=&quot;solid&quot;, color = &quot;grey&quot;) + scale_colour_brewer(palette = &quot;Dark2&quot;) log_flags 4.3.1.4 Chronologie comparative des expéditions de traite en fonction des ports de départs 4.3.1.4.1 Représentation graphique brute ports_depart_chrono &lt;- voyages %&gt;% count(yearam, ptdepimp) %&gt;% filter(complete.cases(ptdepimp)) library(ggplot2) # Création d&#39;un graphique en bâtons plot_ports_depart_chrono &lt;- ggplot(ports_depart_chrono, aes(x=yearam, y=n, group=ptdepimp)) + geom_line() plot_ports_depart_chrono 4.3.1.4.2 Représentation graphique partitionnée des neuf principaux ports (effectifs) Le graphique brut est illisible. Vous pouvez envisagez un représentation graphique alternative en mettant en évidence les ports les plus actifs en combinant la fonction gghighlight (package gghighlight) et la fonction facet_wrap (package ggplot2). Lors de la préparation des données , vous devez créer deux tableaux de données et les réunir par une jointure. Le tableau ports_depart_chrono_total compte le total des expéditions par port pour en afficher le rang (nouvelle colonne rank, fonction dense_rank). Le tableau ports_depart_chrono_annees compte le nombre d’expéditions par port et part années. Le tableau final ports_chrono_rank combine les 2 tableaux. Il vous reste à mettre en évidence dans ggplot2 les courbes des principaux ports en se basant sur les valeurs de la colonne rank. ports_depart_chrono_total &lt;- voyages %&gt;% count(ptdepimp) %&gt;% mutate(rank = dense_rank(desc(n))) ports_depart_chrono_annees &lt;- voyages %&gt;% count(yearam, ptdepimp) %&gt;% filter(complete.cases(ptdepimp)) ports_chrono_rank &lt;- left_join(ports_depart_chrono_annees, ports_depart_chrono_total, by = c(&quot;ptdepimp&quot; = &quot;ptdepimp&quot;)) ports_chrono_rank &lt;- ports_chrono_rank %&gt;% rename(n =n.x ) %&gt;% select(-n.y) library(ggplot2) library(gghighlight) plot_ports_depart_chrono2 &lt;- ggplot(ports_chrono_rank, aes(x=yearam, y=n, group=ptdepimp)) + geom_step(aes(x=yearam, y=n, group=ptdepimp) , color=&quot;#d95f02&quot; , show.legend=FALSE, size = 0.5) + gghighlight(max(rank) &lt; 11, use_direct_label = FALSE, unhighlighted_params = list(size = 0.25, colour = alpha(&quot;grey85&quot;, 0.4))) + scale_x_continuous(breaks=seq(1500, 1875, by=100)) + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle = &quot;Principaux ports de départ&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019) variable yearam&quot;, x = &quot;&quot;, y =&quot;expéditions&quot;) + my_theme_chrono1() + facet_wrap(~ ptdepimp, scales=&quot;free_x&quot;) plot_ports_depart_chrono2 4.3.1.4.3 Représentation graphique partitionnée des neuf principaux ports (effectifs cumulés croissants) ports_depart_chrono_total &lt;- voyages %&gt;% count(ptdepimp) %&gt;% mutate(rank = dense_rank(desc(n))) ports_depart_chrono_annees &lt;- voyages %&gt;% count(yearam, ptdepimp) %&gt;% filter(complete.cases(ptdepimp)) ports_chrono_rank &lt;- left_join(ports_depart_chrono_annees, ports_depart_chrono_total, by = c(&quot;ptdepimp&quot; = &quot;ptdepimp&quot;)) ports_chrono_rank_ecc &lt;- ports_chrono_rank %&gt;% rename(n =n.x ) %&gt;% select(-n.y) %&gt;% group_by(ptdepimp) %&gt;% mutate(ecc = cumsum(n)) %&gt;% ungroup() %&gt;% arrange(ptdepimp, yearam) library(ggplot2) library(gghighlight) plot_ports_depart_chrono_ecc &lt;- ggplot(ports_chrono_rank_ecc, aes(x=yearam, y=ecc, group=ptdepimp)) + geom_step(aes(x=yearam, y=ecc, group=ptdepimp), color=&quot;#d95f02&quot; , show.legend=FALSE, size = 0.5) + gghighlight(max(rank) &lt; 11, use_direct_label = FALSE, unhighlighted_params = list(size = 0.25, colour = alpha(&quot;grey85&quot;, 0.4))) + scale_x_continuous(breaks=seq(1500, 1875, by=100)) + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle =&quot;Principaux ports de départ, effectifs cumulés croissants&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019) variable yearam&quot;, x = &quot;&quot;, y =&quot;expéd.&quot;) + my_theme_chrono1() + facet_wrap(~ ptdepimp, scales=&quot;free_x&quot;) plot_ports_depart_chrono_ecc 4.3.1.5 Chronologie d’arrivée des navires, principaux lieux d’achat d’esclaves lieux_achats &lt;- voyages %&gt;% select(mjbyptimp, datebuy) %&gt;% arrange(datebuy) %&gt;% filter(complete.cases(datebuy)) gg_chrono2 &lt;- ggplot(lieux_achats, aes(x= datebuy, y= mjbyptimp)) gg_chrono2 + geom_point (color=&quot;#d95f02&quot;, alpha =0.3, size = 1.5, position = position_jitter(width = 0, height = 0.25)) + scale_x_date(date_breaks = &quot;10 year&quot;, date_minor_breaks = &quot;5 year&quot;, date_labels = &quot;%Y&quot;) + labs(title = &quot;Principaux lieux d&#39;achat d&#39;esclaves&quot;,subtitle = &quot;&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019) variables mjbyptimp et datebuy&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() 4.3.1.6 Prise en considération des années pour lesquelles des mentions d’expéditions de traite sont absentes. 4.3.1.6.1 Tableau chronologique des expéditions de traite n_exped ## # A tibble: 335 x 2 ## yearam n ## &lt;dbl&gt; &lt;int&gt; ## 1 1514 1 ## 2 1516 1 ## 3 1520 1 ## 4 1525 1 ## 5 1526 5 ## 6 1527 1 ## 7 1532 5 ## 8 1533 1 ## 9 1534 2 ## 10 1535 2 ## # ... with 325 more rows 4.3.1.7 Tableau chronologique des expéditions de traite incluant les années sans observations chrono &lt;- data.frame (yearam = c(1514:1866)) full_n_exped &lt;- left_join(chrono, n_exped) ## Joining, by = &quot;yearam&quot; head(full_n_exped, 20) ## yearam n ## 1 1514 1 ## 2 1515 NA ## 3 1516 1 ## 4 1517 NA ## 5 1518 NA ## 6 1519 NA ## 7 1520 1 ## 8 1521 NA ## 9 1522 NA ## 10 1523 NA ## 11 1524 NA ## 12 1525 1 ## 13 1526 5 ## 14 1527 1 ## 15 1528 NA ## 16 1529 NA ## 17 1530 NA ## 18 1531 NA ## 19 1532 5 ## 20 1533 1 Pour chaque année de la table chrono on vérifie une correspondance dans le tableau des expéditions n_exped : Si correspondance -&gt; la valeur associée de la table de n_exped est reportée dans la table chrono (dans nouvelle colonne n). Si absence de correspondance -&gt; une valeur NA est reportée dans la table chrono (dans nouvelle colonne n). Cette combinaison des données de plusieurs tables est appelée jointure externe. Elle retourne toutes les lignes de la table chrono même si certaines n’existent pas dans la table n_exped. L’ordre des arguments de la fonction left_join à son importance. Comme on souhaite conserver la totalité des lignes de la table de gauche, cette dernière doit constituer le premier argument de la fonction, autrement-dit, celui de gauche). 4.4 Exemples 4.4.1 Chronologie des expéditions de traite à destination de Saint-Domingue 4.4.1.1 Tableau d’effectifs Vous devez filtrer les expéditions en vous fondant sur la variable mjselimp (Imputed principal region of slave disembarkation) puis compter le nombre d’expéditions par années d’arrivée en Amérique (variable yearam) avec la fonction count. stdoming1 &lt;- voyages %&gt;% filter(mjselimp ==&quot;Saint-Domingue&quot;) %&gt;% count(yearam) print(stdoming1) ## # A tibble: 96 x 2 ## yearam n ## &lt;dbl&gt; &lt;int&gt; ## 1 1679 2 ## 2 1684 1 ## 3 1685 4 ## 4 1686 3 ## 5 1687 1 ## 6 1693 1 ## 7 1699 2 ## 8 1701 2 ## 9 1708 1 ## 10 1709 1 ## # ... with 86 more rows 4.4.1.2 Représentation graphique Le diagramme en ligne est conçu avec la fonction plot en base R. Elle prend, comme premier argument le tableau de données à visualiser et, comme second argument le type de représentation (ici lpour line). Les arguments qui suivent permettent d’habiller le graphique. plot(stdoming1, type=&quot;l&quot;, main=&quot;Chronologie des expéditions de traite atlantique à destination de Saint Domingue&quot;, sub=&quot;Voyages, The TransAtlantic Salve Trade Db (2019)&quot;, xlab=&quot;années&quot;, ylab=&quot;expéditions&quot;, cex.main=0.9, cex.sub=0.7, cex.lab=0.75) 4.4.2 Nombre d’esclaves embarqués par années à destination de Saint-Domingue 4.4.2.1 Tableau Excluez en premier les expéditions dont le nombre d’esclaves embarqués (variable slaximp ) est inconnu par l’utilisation conjointe des fonctions filteret complete.cases. Regroupez ensuite les années d’arrivée en Amérique en appliquant la fonction group_by à la variable yearam afin de pouvoir résumer les données (summarise) par la somme (sum) des esclaves embarqués. stdoming2 &lt;- voyages %&gt;% filter(mjselimp ==&quot;Saint-Domingue&quot;) %&gt;% filter(complete.cases(slaximp)) %&gt;% group_by(yearam) %&gt;% summarise(n_esc = sum(slaximp)) print(stdoming2) ## # A tibble: 96 x 2 ## yearam n_esc ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1679 436 ## 2 1684 380 ## 3 1685 1092 ## 4 1686 504 ## 5 1687 316 ## 6 1693 524 ## 7 1699 781 ## 8 1701 607 ## 9 1708 316 ## 10 1709 592 ## # ... with 86 more rows 4.4.2.2 Représentation graphique plot(stdoming2, type=&quot;l&quot;, main=&quot;Chronologie du nombre d&#39;esclaves embarqués à destination de Saint Domingue&quot;, sub=&quot;Voyages, The TransAtlantic Salve Trade Db (2019)&quot;, xlab=&quot;années&quot;, ylab=&quot;expéditions&quot;, cex.main=0.9, cex.sub=0.7, cex.lab=0.75) 4.4.3 Chronologie décennale des expéditions de traite à destination de Saint-Domingue selon les ports de départ Filtrez les expéditions en vous fondant sur la variable mjselimp (Imputed principal region of slave disembarkation) puis compter le nombre d’expéditions par ports de départs (ptdepimp) et par décennies (variable year10) avec la fonction count. stdoming_y10A &lt;- voyages %&gt;% filter(mjselimp ==&quot;Saint-Domingue&quot;) %&gt;% count(year10, ptdepimp) print(stdoming_y10A ) ## # A tibble: 134 x 3 ## year10 ptdepimp n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 years 1671-1680 France, port unspecified 1 ## 2 years 1671-1680 Saint-Malo 1 ## 3 years 1681-90 Bordeaux 1 ## 4 years 1681-90 Dunkerque 1 ## 5 years 1681-90 Honfleur 1 ## 6 years 1681-90 La Rochelle 2 ## 7 years 1681-90 Le Havre 3 ## 8 years 1681-90 Saint-Malo 1 ## 9 years 1691-1700 Saint-Malo 1 ## 10 years 1691-1700 &lt;NA&gt; 2 ## # ... with 124 more rows 4.4.3.0.1 Diagramme en barres empilées Un diagramme à barres empilées permet de visualiser le nombre total des expéditions à destination de Saint-Domingue par décennies et ports de départ des navires. voyages %&gt;% filter(mjselimp ==&quot;Saint-Domingue&quot;) %&gt;% distinct(ptdepimp) ## # A tibble: 38 x 1 ## ptdepimp ## &lt;chr&gt; ## 1 &lt;NA&gt; ## 2 Nantes ## 3 Vlissingen ## 4 Hellevoetsluis ## 5 Bristol ## 6 St. Kitts, port unspecified ## 7 Boston ## 8 St. Thomas ## 9 Bayonne ## 10 Bordeaux ## # ... with 28 more rows 38 ports ont pratiqué la traite à destination de Saint-Domingue. Afin d’envisager un diagramme en barres empilées lisible vous devez regrouper les ports dont l’activité est la moins importante sous le dénominatif “autres”. Pour ce faire, les fonctions mutate et replace sont utilisées pour recoder les noms de ports en fonction d’une condition. Ainsi, tous les ports dont le nombre d’expéditions est inférieur à 50 par décennies n &lt; 50 sont renommés en Autres (exped. &lt; 20) permettant de passer de 38 à 5 valeurs différentes. Enfin le texte years préfixant les décennies est supprimé ou plus exactement remplacé par une chaîne de caractères vide (fonction subassociée à mutate). library(dplyr) stdoming_y10B &lt;- voyages %&gt;% filter(mjselimp ==&quot;Saint-Domingue&quot;) %&gt;% count(year10, ptdepimp) %&gt;% mutate(ptdepimp = replace(ptdepimp, n &lt; 50, &quot;Autres (exped. &lt; 50)&quot;)) %&gt;% mutate(year10 = sub(&quot;years&quot;, &quot;&quot;, year10)) stdoming_y10B ## # A tibble: 134 x 3 ## year10 ptdepimp n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 &quot; 1671-1680&quot; Autres (exped. &lt; 50) 1 ## 2 &quot; 1671-1680&quot; Autres (exped. &lt; 50) 1 ## 3 &quot; 1681-90&quot; Autres (exped. &lt; 50) 1 ## 4 &quot; 1681-90&quot; Autres (exped. &lt; 50) 1 ## 5 &quot; 1681-90&quot; Autres (exped. &lt; 50) 1 ## 6 &quot; 1681-90&quot; Autres (exped. &lt; 50) 2 ## 7 &quot; 1681-90&quot; Autres (exped. &lt; 50) 3 ## 8 &quot; 1681-90&quot; Autres (exped. &lt; 50) 1 ## 9 &quot; 1691-1700&quot; Autres (exped. &lt; 50) 1 ## 10 &quot; 1691-1700&quot; Autres (exped. &lt; 50) 2 ## # ... with 124 more rows Le diagramme empilé est réalisé avec le package ggplot2 ggplot(data = stdoming_y10B, aes(y = n, x = year10, fill = ptdepimp)) + geom_bar(stat=&quot;identity&quot;, width = 0.5) + scale_fill_brewer(palette = &quot;Dark2&quot;) + labs(title = &quot;Chronologie des expéditions de traite à destination de Saint-Domingue&quot;, subtitle =&quot;Principaux ports de départ&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019) variables year10 et slaximp \\n W. Cariou (2020)&quot;, x = &quot;&quot;, y =&quot;&quot;, fill = &quot;Ports de départ&quot;) + my_theme_chrono1() + theme(axis.text.x = element_text(angle = 90, vjust= 0.2, hjust = 1)) "],
["cartographie.html", "Chapter 5 Cartographie 5.1 Préalables 5.2 Lieux de la traite 5.3 Cartes basées sur un filtrage 5.4 Carte des Lieux d’achat des esclaves pour Nantes", " Chapter 5 Cartographie 5.1 Préalables 5.1.1 Packages Vous aurez besoin en outre du tidyverse des packages suivants : readxl : lecture des feuilles de calcul au format xlsx. sf : package de référence pour le données géospatiale. tmap : package de cartographie. library(tidyverse) library(readxl) library(sf) ## Linking to GEOS 3.6.1, GDAL 2.2.3, PROJ 4.9.3 library(tmap) ## Warning: replacing previous import &#39;sf::st_make_valid&#39; by ## &#39;lwgeom::st_make_valid&#39; when loading &#39;tmap&#39; 5.1.2 Importation des données 5.1.2.1 Fond de carte statique rattaché au package tmap Tmap possède un fond de carte statique que l’on peut activer avec la commande suivante : data(&quot;World&quot;) 5.1.2.2 Données géoréférencées des bases Trans Atlantic slave et Inter American slave trade Les données non publiées sur lesite slavevoyages.org mais disponibles à l’adresse, sont stockées dans une feuille de calcul au format xlsx. Elle sont lues par la fonction read_excel du package readxl et mises en qualité par une conversion au format numérique des coordonnées en longitude et latitude, la suppression des lieux non géoréférencés et des lieux géoréférencés 0.0, 0.0. geocode &lt;- read_excel(&quot;stdb-geocode-19vcariou2.xlsx&quot;) geocode &lt;- geocode %&gt;% mutate(x = as.numeric(x)) %&gt;% mutate(y = as.numeric(y)) %&gt;% drop_na(x,y) %&gt;% filter(! x ==0) ## Warning: NAs introduits lors de la conversion automatique ## Warning: NAs introduits lors de la conversion automatique 5.1.3 Références Muenchow, Robin Lovelace, Jakub Nowosad, Jannes. Chapter 8 Making maps with R | Geocomputation with R. Consulté le 5 avril 2020. https://geocompr.robinlovelace.net/. 5.2 Lieux de la traite Le tableau de données geocodeest transformé en objet géospatial de classe “sf”. Les colonnes correspondants aux coordonnées en longitude et latitude sont précisées. Le système de coordonnées de référence (crs=4326) est indiqué. Le tableau spatial est appelé geocode_sppour le distinguer du tableau non spatial appelé geocode geocode_sp &lt;- st_as_sf(geocode, coords = c(&quot;x&quot;, &quot;y&quot;), crs=4326) 5.2.1 tmap Comme ggplot2 , tmap est basé sur l’idée d’une «grammaire des graphiques». Cela implique une séparation entre les données d’entrée et la symbologie. Le bloc de construction de base est tm_shape()qui définit les données d’entrée, suivi par un ou plusieurs éléments de couche tels que tm_fill()et tm_dots(). Cette superposition est illustrée dans le bloc de code ci-dessous. Il s’agit d’une approche intuitive de la création de cartes: la tâche courante d’ajout de nouvelles couches est effectuée par l’opérateur d’addition +, suivi de tm_*(). L’astérisque (*) fait référence à un large éventail de types de calques. 5.2.2 carte statique map1s &lt;- tm_shape(World) + # s pour statique tm_fill() + tm_shape(geocode_sp) + tm_dots(col = &quot;red&quot;, size=0.04) + tm_layout(title = &quot;Données géoréférencées des bases Trans Atlantic slave et Inter American slave trade&quot;) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting map1s La carte peut-être ensuite sauvegardée par tmap_save(map1s, \"traite1.png\", width=1920, height=1080). 5.2.3 carte interactive Une caractéristique unique de tmap est sa capacité à créer des cartes statiques et interactives en utilisant le même code. Les cartes peuvent être consultées de manière interactive à tout moment à l’aide de la commande tmap_mode(\"view\") L’interactivité s’effectue à l’aide de la bibliothèque Javascript Leaflet qui offre la possibilité de zoomer sur n’importe quelle partie d’un jeu de données superposé à des carte Web tuilées (trois fonds de carte disponibles par défaut) et d’afficher des étiquettes. map1i &lt;- tm_shape(geocode_sp)+ # i pour interactive tm_dots(col = &quot;red&quot;, size=0.04) + tm_layout(title = &quot;Données géoréférencées des bases Trans Atlantic slave et Inter American slave trade&quot;) tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing map1i 5.3 Cartes basées sur un filtrage 5.3.1 Exemple de localisation des ports négriers Vous aller sélectionner la liste des ports avec la fonction distinct et sotcker cette liste dans un objet appelé ports. ports &lt;- voyages %&gt;% distinct (ptdepimp) Vous devez ensuite effectuer une jointure interne entre les tables ports et geocode. Seules les lignes de la table geocode dont les noms de lieux (place_namecorrespondent au noms des ports ptdepimp) sont alors conservés dans le résultat retourné. Les colonnes des deux tables sont juxtaposées ports_geocode &lt;- inner_join(ports, geocode, by =c(&quot;ptdepimp&quot; = &quot;place_name&quot;)) Il reste a transformer le tableau résultant de la jointure en objet spatial ports_geocode_sp&lt;- st_as_sf(ports_geocode, coords = c(&quot;x&quot;, &quot;y&quot;), crs=4326) map_portsi &lt;- tm_shape(ports_geocode_sp)+ tm_dots(col = &quot;red&quot;, size=0.04) + tm_layout(title = &quot;Ports de départ des expéditions de traite atlantique&quot;) tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing map_portsi 5.4 Carte des Lieux d’achat des esclaves pour Nantes Vous aller sélectionner la liste des ports avec la fonction distinct. ntes_achat &lt;- voyages %&gt;% filter(portdep == &quot;Nantes&quot;) %&gt;% count(majbuypt) Vous devez ensuite réaliser une jointure interne entre les tableaux ports et geocode. Seules les lignes de la table geocode dont les noms de lieux (place_namecorrespondent au noms des ports ptdepimp) sont alors conservés dans le résultat retourné. ntes_achat_geocode &lt;- inner_join(ntes_achat, geocode, by =c(&quot;majbuypt&quot; = &quot;place_name&quot;)) Il reste a transformer le tableau résultant de la jointure en objet spatial ntes_achat_geocode_sp &lt;- st_as_sf(ntes_achat_geocode, coords = c(&quot;x&quot;, &quot;y&quot;), crs=4326) map_portsi &lt;- tm_shape(ntes_achat_geocode_sp)+ tm_dots(size=0.02) tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing map_portsi 5.4.1 Carte comparative des lieux de vente en fonction pavillons national_vente &lt;- voyages %&gt;% count(national, mjslptimp) %&gt;% drop_na() Vous devez ensuite réaliser une jointure interne entre les tableaux ports et geocode. Seules les lignes de la table geocode dont les noms de lieux (place_namecorrespondent au noms des ports ptdepimp) sont alors conservés dans le résultat retourné. national_vente_geocode &lt;- inner_join(national_vente , geocode, by =c(&quot;mjslptimp&quot; = &quot;place_name&quot;)) Il reste a transformer le tableau résultant de la jointure en objet spatial national_vente_geocode_sp &lt;- st_as_sf(national_vente_geocode, coords = c(&quot;x&quot;, &quot;y&quot;), crs=4326) national_s &lt;- tm_shape(World) + # s pour statique tm_fill() + tm_shape(national_vente_geocode_sp)+ tm_dots(size=0.02) + tm_facets(by = &quot;national&quot;, as.layers =TRUE) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting national_s "],
["r-intermédiaire.html", "Chapter 6 R intermédiaire 6.1 Fonctions personnalisées 6.2 Programmation", " Chapter 6 R intermédiaire 6.1 Fonctions personnalisées 6.1.1 Exemple de fonction : graphiques chronologiques de ports en Base R Lorsque vous devez répétez des instructions, par exemple pour réaliser des graphiques similaires de différents ports de la base “voyages”, il peut-être utile de programmer une fonction. Cette dernière va contenir la totalité des instructions nécessaires au filtrage et à la construction du graphique. Il ne vous restera plus qu’à appeler la fonction par son nom, saisir le nom du port comme argument et la fonction affichera le graphique correspondant. Nous supposons que le tableau voyagesest présent dans l’environnement. La fonction graph_port est programmée à l’aide de la fonction function. Les instructions qu’elle possède sont entre accolades. Elle prend comme argument le nom d’un port. Cet argument appelé portest déclaré dans les parenthèses qui précédent les accolades. Lorsque vous exécutez la fonction, vous n’avez qu’à renseigner le nom d’un port. La valeur saisie va être assignée à portet permettre de filtrer le tableau et d’afficher le nom du port dans le titre du graphique. graph_port &lt;- function (port) { library(dplyr) voyages %&gt;% filter(ptdepimp == port) %&gt;% count(yearam) %&gt;% plot( type = &quot;s&quot;, main=paste(&quot;Chronologie des expéditions de traite : &quot;, port), sub=&quot;Voyages, The TransAtlantic Salve Trade Db&quot;, xlab=&quot;années&quot;, ylab=&quot;expéditions&quot; ) } graph_port(&quot;Brest&quot;) graph_port(&quot;Vannes&quot;) graph_port(&quot;Lorient&quot;) 6.1.2 Exemple de fonction : thème graphique (ggplot2) Un programme peut procéder aux mêmes traitements, ou à des traitements similaires, à plusieurs endroits de son déroulement. C’est par exemple le cas des instructions dédiées à l’apparence des graphiques qui peuvent mettre en jeux des dizaines de paramètres. Vous pouvez bien entendu répéter le code correspondant autant de fois que nécessaire mais en cas de modification, il va falloir traquer toutes les apparitions de ce code pour faire convenablement la modification ! Il faut donc opter pour une autre stratégie, qui consiste à séparer ce morceau de code du corps du programme .Il ne restera alors plus qu’à appeler ce groupe d’instructions Ainsi, le programme devient modulaire, et il suffit de faire une seule modification pour que cette modification prenne effet dans la totalité du programme. Le corps du programme s’appelle alors la procédure principale, et ces groupes d’instructions auxquels on a recours s’appellent des fonctions. A titre d’exemple, voici une fonction personnalisée qui stocke un thème pour les graphiques conçus avec le package ggplot2. Grâce à la fonction, il devient inutile de reproduire ces instructions pour chaque graphique à réaliser. Il suffit pour chaque graphique d’appeler la fonction my_theme_chrono1. La fonction my_theme_chrono1 est programmée à l’aide de la fonction function. Les instructions qu’elle possède sont entre accolades. Dans le cas présent, la fonction ne prend pas d’arguments. Fonction : my_theme_chrono1 &lt;- function() {theme(plot.caption =element_text(colour = &quot;grey25&quot;), plot.subtitle = element_text(colour = &quot;grey25&quot;), axis.line.y = element_blank(), panel.background = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.y = element_line( size=.1, color=&quot;grey&quot;, linetype = &quot;dashed&quot;), axis.ticks.y = element_blank(), axis.text.y.left = element_text(vjust = -0.9), axis.line.x = element_blank()) } Utilisation de la fonction au sein d’un graphique : n_exped &lt;- voyages %&gt;% count(yearam) gg_chrono1 &lt;- ggplot(n_exped, aes(x= yearam, y= n)) gg_chrono1 + geom_area (color=&quot;#fc8d62&quot;, fill=&quot;#E5E5E5&quot;) + scale_x_continuous(breaks=seq(1500, 1875, by=25)) + geom_hline(yintercept=0, linetype=&quot;solid&quot;, color = &quot;grey&quot;) + labs(title = &quot;Chronologie des expéditions de traite atlantique&quot;, subtitle = &quot;Expéditions&quot;, caption =&quot;Source : The Trans-Atlantic Slave Trade Database (2019).Variable yearam \\n W. Cariou (2020)&quot;, x=&quot;&quot;, y=&quot;&quot;) + my_theme_chrono1() + # Utilisation de la fonction scale_y_continuous(limits = c(-10,450), expand = c(0, 0)) 6.2 Programmation Programmer revêt comme signification le fait d’agir sur le déroulement d’un programme. Lorsque vous devez agir sur ce déroulement, vous aller employer des structures de contrôles. 6.2.1 Boucle for La boucle for permet de répéter les mêmes instructions plusieurs fois. Une boucle for possède une limite fixée d’itérations définie à l’avance. 6.2.1.1 Exemples x &lt;- &quot;Grr&quot; for (i in 1:4){ #&lt;&lt; Initialisation de nombre d&#39;itération de la boucle (compteur). print(x) #&lt;&lt; instruction à répéter. } ## [1] &quot;Grr&quot; ## [1] &quot;Grr&quot; ## [1] &quot;Grr&quot; ## [1] &quot;Grr&quot; x &lt;- &quot;*&quot; y &lt;- &quot;*&quot; for (i in 1:6){ print(x) x &lt;- paste(x,y) } ## [1] &quot;*&quot; ## [1] &quot;* *&quot; ## [1] &quot;* * *&quot; ## [1] &quot;* * * *&quot; ## [1] &quot;* * * * *&quot; ## [1] &quot;* * * * * *&quot; 6.2.1.2 Cas pratique : représentation en Base R construite à partir d’une boucle for Nous supposons que le tableau voyagesest présent dans l’environnement. L’en-tête de boucle : i est une variable créée par la fonction for. Elle va prendre prend successivement chacune des valeurs unique de la variable exped_flags$natinimp à chaque itération de la boucle. Corps de la boucle. A chaque itération : On filtre l’objet exped_flags en se basant sur la variable natinimp dont la valeur valeur varie en fonction de i. On stocke le tableau filtré dans un objet appelée graphique. on affiche le graphique de i par la fonction plot en définissant x et y et en définissant un titre basé sur i. # Préparation des données exped_flags &lt;- voyages %&gt;% count(yearam, natinimp) %&gt;% filter(complete.cases(natinimp)) %&gt;% filter(!natinimp ==&quot;Other&quot;) # Affichage par(mfrow=c(3, 3)) # Boucle for(i in unique(exped_flags$natinimp)){ graphique &lt;- exped_flags %&gt;% filter (natinimp == i) plot(graphique$yearam, graphique$n, main=i, xlab = &quot;&quot;, ylab = &quot;expéditions de traite&quot;, type =&quot;l&quot;) } "]
]
